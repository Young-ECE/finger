ARM GAS  /tmp/cc4NsAFK.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.rodata.Data_Send.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 25642C25 		.ascii	"%d,%d,%d,\000"
  23      642C2564 
  23      2C00
  24 000a 0000     		.align	2
  25              	.LC1:
  26 000c 25752C25 		.ascii	"%u,%u,\000"
  26      752C00
  27 0013 00       		.align	2
  28              	.LC2:
  29 0014 25642C25 		.ascii	"%d,%d,%d,%d,%d,%d,%d,%d,\000"
  29      642C2564 
  29      2C25642C 
  29      25642C25 
  29      642C2564 
  30 002d 000000   		.align	2
  31              	.LC3:
  32 0030 25640A00 		.ascii	"%d\012\000"
  33              		.section	.text.Data_Send,"ax",%progbits
  34              		.align	1
  35              		.global	Data_Send
  36              		.syntax unified
  37              		.thumb
  38              		.thumb_func
  40              	Data_Send:
  41              	.LFB138:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
ARM GAS  /tmp/cc4NsAFK.s 			page 2


  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "dma.h"
  22:Core/Src/main.c **** #include "i2c.h"
  23:Core/Src/main.c **** #include "i2s.h"
  24:Core/Src/main.c **** #include "usart.h"
  25:Core/Src/main.c **** #include "usb_device.h"
  26:Core/Src/main.c **** #include "gpio.h"
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  30:Core/Src/main.c **** #include <stdarg.h>
  31:Core/Src/main.c **** #include <string.h>
  32:Core/Src/main.c **** #include <stdio.h>
  33:Core/Src/main.c **** #include <stdint.h>
  34:Core/Src/main.c **** #include "vcnl4040_sensor.h"
  35:Core/Src/main.c **** #include "ens160_sensor.h"
  36:Core/Src/main.c **** #include "humidity_temp_sensor.h"
  37:Core/Src/main.c **** #include "microphone_sensor.h"
  38:Core/Src/main.c **** #include <stdlib.h>
  39:Core/Src/main.c **** #include "methods.h"
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END Includes */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PTD */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  50:Core/Src/main.c **** /* USER CODE BEGIN PD */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PD */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  55:Core/Src/main.c **** /* USER CODE BEGIN PM */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* USER CODE END PM */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE BEGIN PV */
  62:Core/Src/main.c **** extern I2C_HandleTypeDef hi2c1;
  63:Core/Src/main.c **** extern I2S_HandleTypeDef hi2s1;  // 例如使用 I2S1
  64:Core/Src/main.c **** extern UART_HandleTypeDef huart1; 
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** VCNL4040_HandleTypeDef vcnl4040;
ARM GAS  /tmp/cc4NsAFK.s 			page 3


  68:Core/Src/main.c **** ENS160_HandleTypeDef ens160;
  69:Core/Src/main.c **** HDC302x_HandleTypeDef hdc1, hdc2, hdc3, hdc4;
  70:Core/Src/main.c **** MIC_HandleTypeDef mic;
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /* USER CODE END PV */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  76:Core/Src/main.c **** void SystemClock_Config(void);
  77:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** void Data_Send(void)
  80:Core/Src/main.c **** {
  42              		.loc 1 80 1 view -0
  43              		.cfi_startproc
  44              		@ args = 0, pretend = 0, frame = 48
  45              		@ frame_needed = 0, uses_anonymous_args = 0
  46 0000 10B5     		push	{r4, lr}
  47              	.LCFI0:
  48              		.cfi_def_cfa_offset 8
  49              		.cfi_offset 4, -8
  50              		.cfi_offset 14, -4
  51 0002 92B0     		sub	sp, sp, #72
  52              	.LCFI1:
  53              		.cfi_def_cfa_offset 80
  81:Core/Src/main.c ****   uint8_t aqi;
  54              		.loc 1 81 3 view .LVU1
  82:Core/Src/main.c ****   uint16_t tvoc;
  55              		.loc 1 82 3 view .LVU2
  83:Core/Src/main.c ****   uint16_t eco2;
  56              		.loc 1 83 3 view .LVU3
  84:Core/Src/main.c ****   ENS160_ReadAQI(&ens160, &aqi);
  57              		.loc 1 84 3 view .LVU4
  58 0004 444C     		ldr	r4, .L3
  59 0006 0DF14701 		add	r1, sp, #71
  60 000a 2046     		mov	r0, r4
  61 000c FFF7FEFF 		bl	ENS160_ReadAQI
  62              	.LVL0:
  85:Core/Src/main.c ****   ENS160_ReadTVOC(&ens160, &tvoc);
  63              		.loc 1 85 3 view .LVU5
  64 0010 11A9     		add	r1, sp, #68
  65 0012 2046     		mov	r0, r4
  66 0014 FFF7FEFF 		bl	ENS160_ReadTVOC
  67              	.LVL1:
  86:Core/Src/main.c ****   ENS160_ReadECO2(&ens160, &eco2);
  68              		.loc 1 86 3 view .LVU6
  69 0018 0DF14201 		add	r1, sp, #66
  70 001c 2046     		mov	r0, r4
  71 001e FFF7FEFF 		bl	ENS160_ReadECO2
  72              	.LVL2:
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   uint16_t als, ps;
  73              		.loc 1 88 3 view .LVU7
  89:Core/Src/main.c ****   VCNL4040_ReadALS(&vcnl4040, &als);
  74              		.loc 1 89 3 view .LVU8
  75 0022 3E4C     		ldr	r4, .L3+4
  76 0024 10A9     		add	r1, sp, #64
ARM GAS  /tmp/cc4NsAFK.s 			page 4


  77 0026 2046     		mov	r0, r4
  78 0028 FFF7FEFF 		bl	VCNL4040_ReadALS
  79              	.LVL3:
  90:Core/Src/main.c ****   VCNL4040_ReadPS(&vcnl4040, &ps);
  80              		.loc 1 90 3 view .LVU9
  81 002c 0DF13E01 		add	r1, sp, #62
  82 0030 2046     		mov	r0, r4
  83 0032 FFF7FEFF 		bl	VCNL4040_ReadPS
  84              	.LVL4:
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   float T1, H1, T2, H2, T3, H3, T4, H4;
  85              		.loc 1 92 3 view .LVU10
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   HDC302x_ReadData(&hdc1, &T1, &H1);
  86              		.loc 1 94 3 view .LVU11
  87 0036 0DAA     		add	r2, sp, #52
  88 0038 0EA9     		add	r1, sp, #56
  89 003a 3948     		ldr	r0, .L3+8
  90 003c FFF7FEFF 		bl	HDC302x_ReadData
  91              	.LVL5:
  95:Core/Src/main.c ****   HDC302x_ReadData(&hdc2, &T2, &H2);
  92              		.loc 1 95 3 view .LVU12
  93 0040 0BAA     		add	r2, sp, #44
  94 0042 0CA9     		add	r1, sp, #48
  95 0044 3748     		ldr	r0, .L3+12
  96 0046 FFF7FEFF 		bl	HDC302x_ReadData
  97              	.LVL6:
  96:Core/Src/main.c ****   HDC302x_ReadData(&hdc3, &T3, &H3);
  98              		.loc 1 96 3 view .LVU13
  99 004a 09AA     		add	r2, sp, #36
 100 004c 0AA9     		add	r1, sp, #40
 101 004e 3648     		ldr	r0, .L3+16
 102 0050 FFF7FEFF 		bl	HDC302x_ReadData
 103              	.LVL7:
  97:Core/Src/main.c ****   HDC302x_ReadData(&hdc4, &T4, &H4);
 104              		.loc 1 97 3 view .LVU14
 105 0054 07AA     		add	r2, sp, #28
 106 0056 08A9     		add	r1, sp, #32
 107 0058 3448     		ldr	r0, .L3+20
 108 005a FFF7FEFF 		bl	HDC302x_ReadData
 109              	.LVL8:
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   USB_Print("%d,%d,%d,", aqi, tvoc, eco2);
 110              		.loc 1 99 3 view .LVU15
 111 005e BDF84230 		ldrh	r3, [sp, #66]
 112 0062 BDF84420 		ldrh	r2, [sp, #68]
 113 0066 9DF84710 		ldrb	r1, [sp, #71]	@ zero_extendqisi2
 114 006a 3148     		ldr	r0, .L3+24
 115 006c FFF7FEFF 		bl	USB_Print
 116              	.LVL9:
 100:Core/Src/main.c ****   USB_Print("%u,%u,", als, ps);
 117              		.loc 1 100 3 view .LVU16
 118 0070 BDF83E20 		ldrh	r2, [sp, #62]
 119 0074 BDF84010 		ldrh	r1, [sp, #64]
 120 0078 2E48     		ldr	r0, .L3+28
 121 007a FFF7FEFF 		bl	USB_Print
 122              	.LVL10:
ARM GAS  /tmp/cc4NsAFK.s 			page 5


 101:Core/Src/main.c ****   USB_Print("%d,%d,%d,%d,%d,%d,%d,%d,", (int)(T1 * 10), (int)(H1 * 10), (int)(T2 * 10), (int)(H2 * 
 123              		.loc 1 101 3 view .LVU17
 124              		.loc 1 101 50 is_stmt 0 view .LVU18
 125 007e F2EE047A 		vmov.f32	s15, #1.0e+1
 126 0082 DDED0E4A 		vldr.32	s9, [sp, #56]
 127 0086 64EEA74A 		vmul.f32	s9, s9, s15
 128              		.loc 1 101 66 view .LVU19
 129 008a 9DED0D4A 		vldr.32	s8, [sp, #52]
 130 008e 24EE274A 		vmul.f32	s8, s8, s15
 131              		.loc 1 101 82 view .LVU20
 132 0092 DDED0C3A 		vldr.32	s7, [sp, #48]
 133 0096 63EEA73A 		vmul.f32	s7, s7, s15
 134              		.loc 1 101 98 view .LVU21
 135 009a 9DED0B7A 		vldr.32	s14, [sp, #44]
 136 009e 27EE277A 		vmul.f32	s14, s14, s15
 137              		.loc 1 101 114 view .LVU22
 138 00a2 DDED0A6A 		vldr.32	s13, [sp, #40]
 139 00a6 66EEA76A 		vmul.f32	s13, s13, s15
 140              		.loc 1 101 130 view .LVU23
 141 00aa 9DED096A 		vldr.32	s12, [sp, #36]
 142 00ae 26EE276A 		vmul.f32	s12, s12, s15
 143              		.loc 1 101 146 view .LVU24
 144 00b2 DDED085A 		vldr.32	s11, [sp, #32]
 145 00b6 65EEA75A 		vmul.f32	s11, s11, s15
 146              		.loc 1 101 162 view .LVU25
 147 00ba 9DED075A 		vldr.32	s10, [sp, #28]
 148 00be 65EE277A 		vmul.f32	s15, s10, s15
 149              		.loc 1 101 3 view .LVU26
 150 00c2 FDEEE77A 		vcvt.s32.f32	s15, s15
 151 00c6 CDED047A 		vstr.32	s15, [sp, #16]	@ int
 152 00ca FDEEE55A 		vcvt.s32.f32	s11, s11
 153 00ce CDED035A 		vstr.32	s11, [sp, #12]	@ int
 154 00d2 BDEEC66A 		vcvt.s32.f32	s12, s12
 155 00d6 8DED026A 		vstr.32	s12, [sp, #8]	@ int
 156 00da FDEEE66A 		vcvt.s32.f32	s13, s13
 157 00de CDED016A 		vstr.32	s13, [sp, #4]	@ int
 158 00e2 BDEEC77A 		vcvt.s32.f32	s14, s14
 159 00e6 8DED007A 		vstr.32	s14, [sp]	@ int
 160 00ea FDEEE37A 		vcvt.s32.f32	s15, s7
 161 00ee 17EE903A 		vmov	r3, s15	@ int
 162 00f2 FDEEC47A 		vcvt.s32.f32	s15, s8
 163 00f6 17EE902A 		vmov	r2, s15	@ int
 164 00fa FDEEE47A 		vcvt.s32.f32	s15, s9
 165 00fe 17EE901A 		vmov	r1, s15	@ int
 166 0102 0D48     		ldr	r0, .L3+32
 167 0104 FFF7FEFF 		bl	USB_Print
 168              	.LVL11:
 102:Core/Src/main.c ****   USB_Print("%d\n", mic.audio_result);
 169              		.loc 1 102 3 is_stmt 1 view .LVU27
 170 0108 0C4B     		ldr	r3, .L3+36
 171 010a 5968     		ldr	r1, [r3, #4]
 172 010c 0C48     		ldr	r0, .L3+40
 173 010e FFF7FEFF 		bl	USB_Print
 174              	.LVL12:
 103:Core/Src/main.c **** }
 175              		.loc 1 103 1 is_stmt 0 view .LVU28
 176 0112 12B0     		add	sp, sp, #72
ARM GAS  /tmp/cc4NsAFK.s 			page 6


 177              	.LCFI2:
 178              		.cfi_def_cfa_offset 8
 179              		@ sp needed
 180 0114 10BD     		pop	{r4, pc}
 181              	.L4:
 182 0116 00BF     		.align	2
 183              	.L3:
 184 0118 00000000 		.word	ens160
 185 011c 00000000 		.word	vcnl4040
 186 0120 00000000 		.word	hdc1
 187 0124 00000000 		.word	hdc2
 188 0128 00000000 		.word	hdc3
 189 012c 00000000 		.word	hdc4
 190 0130 00000000 		.word	.LC0
 191 0134 0C000000 		.word	.LC1
 192 0138 14000000 		.word	.LC2
 193 013c 00000000 		.word	mic
 194 0140 30000000 		.word	.LC3
 195              		.cfi_endproc
 196              	.LFE138:
 198              		.section	.text.Error_Handler,"ax",%progbits
 199              		.align	1
 200              		.global	Error_Handler
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 205              	Error_Handler:
 206              	.LFB141:
 104:Core/Src/main.c **** 
 105:Core/Src/main.c **** /* USER CODE END PFP */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 108:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** /* USER CODE END 0 */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /**
 113:Core/Src/main.c ****   * @brief  The application entry point.
 114:Core/Src/main.c ****   * @retval int
 115:Core/Src/main.c ****   */
 116:Core/Src/main.c **** int main(void)
 117:Core/Src/main.c **** {
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 120:Core/Src/main.c ****   
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* USER CODE END 1 */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 127:Core/Src/main.c ****   HAL_Init();
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   /* USER CODE END Init */
 132:Core/Src/main.c **** 
ARM GAS  /tmp/cc4NsAFK.s 			page 7


 133:Core/Src/main.c ****   /* Configure the system clock */
 134:Core/Src/main.c ****   SystemClock_Config();
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   /* USER CODE END SysInit */
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* Initialize all configured peripherals */
 142:Core/Src/main.c ****   MX_GPIO_Init();
 143:Core/Src/main.c ****   MX_DMA_Init();
 144:Core/Src/main.c ****   MX_I2C1_Init();
 145:Core/Src/main.c ****   MX_USART1_UART_Init();
 146:Core/Src/main.c ****   MX_I2S1_Init();
 147:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 148:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 149:Core/Src/main.c ****   RGB_LED_Init();
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   VCNL4040_Init(&vcnl4040, &hi2c1, VCNL4040_I2C_ADDR_8BIT);
 152:Core/Src/main.c ****   ENS160_Init(&ens160,&hi2c1, ENS160_I2C_ADDR_LOW);
 153:Core/Src/main.c ****   HDC302x_Init(&hdc1, &hi2c1, HDC302x_ADDR_44);
 154:Core/Src/main.c ****   HDC302x_Init(&hdc2, &hi2c1, HDC302x_ADDR_45);
 155:Core/Src/main.c ****   HDC302x_Init(&hdc3, &hi2c1, HDC302x_ADDR_46);
 156:Core/Src/main.c ****   HDC302x_Init(&hdc4, &hi2c1, HDC302x_ADDR_47);
 157:Core/Src/main.c ****   MIC_Init(&mic, &hi2s1);
 158:Core/Src/main.c ****   MIC_Start(&mic);
 159:Core/Src/main.c ****  
 160:Core/Src/main.c ****   /* USER CODE END 2 */
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   /* Infinite loop */
 163:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 164:Core/Src/main.c ****   while (1)
 165:Core/Src/main.c ****   {
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****     /* USER CODE END WHILE */
 168:Core/Src/main.c ****     Data_Send();
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****     // HAL_Delay();
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 174:Core/Src/main.c ****   }
 175:Core/Src/main.c ****   /* USER CODE END 3 */
 176:Core/Src/main.c **** }
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** /**
 179:Core/Src/main.c ****   * @brief System Clock Configuration
 180:Core/Src/main.c ****   * @retval None
 181:Core/Src/main.c ****   */
 182:Core/Src/main.c **** void SystemClock_Config(void)
 183:Core/Src/main.c **** {
 184:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 185:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
ARM GAS  /tmp/cc4NsAFK.s 			page 8


 190:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 193:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 194:Core/Src/main.c ****   */
 195:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 196:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 199:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 204:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 205:Core/Src/main.c ****   {
 206:Core/Src/main.c ****     Error_Handler();
 207:Core/Src/main.c ****   }
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 210:Core/Src/main.c ****   */
 211:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 212:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 213:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 214:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 215:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 216:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 219:Core/Src/main.c ****   {
 220:Core/Src/main.c ****     Error_Handler();
 221:Core/Src/main.c ****   }
 222:Core/Src/main.c **** }
 223:Core/Src/main.c **** 
 224:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c **** 
 227:Core/Src/main.c **** /*
 228:Core/Src/main.c ****     uint8_t aqi;
 229:Core/Src/main.c ****     uint16_t tvoc, eco2;
 230:Core/Src/main.c ****     ENS160_ReadAQI(&ens160, &aqi);
 231:Core/Src/main.c ****     ENS160_ReadTVOC(&ens160, &tvoc);
 232:Core/Src/main.c ****     ENS160_ReadECO2(&ens160, &eco2);
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****     Debug_Print("%d,%d,%d\n", aqi, tvoc, eco2);
 235:Core/Src/main.c **** 
 236:Core/Src/main.c **** 
 237:Core/Src/main.c **** float T1, H1, T2, H2, T3, H3, T4, H4;
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****         HTS_ReadData(&hts1, &T1, &H1);
 240:Core/Src/main.c ****         HTS_ReadData(&hts2, &T2, &H2);
 241:Core/Src/main.c ****         HTS_ReadData(&hts3, &T3, &H3);
 242:Core/Src/main.c ****         HTS_ReadData(&hts4, &T4, &H4);
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****         printf("[S1] T=%.2f°C RH=%.1f%% | [S2] T=%.2f°C RH=%.1f%%\r\n", T1, H1, T2, H2);
 245:Core/Src/main.c ****         printf("[S3] T=%.2f°C RH=%.1f%% | [S4] T=%.2f°C RH=%.1f%%\r\n", T3, H3, T4, H4);
 246:Core/Src/main.c **** 
ARM GAS  /tmp/cc4NsAFK.s 			page 9


 247:Core/Src/main.c **** 
 248:Core/Src/main.c **** uint16_t als, ps;
 249:Core/Src/main.c ****         VCNL4040_ReadALS(&vcnl4040, &als);
 250:Core/Src/main.c ****         VCNL4040_ReadPS(&vcnl4040, &ps);
 251:Core/Src/main.c ****         printf("ALS=%u, PS=%u\r\n", als, ps);
 252:Core/Src/main.c ****         HAL_Delay(500);
 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** 
 255:Core/Src/main.c **** */
 256:Core/Src/main.c **** 
 257:Core/Src/main.c **** /* USER CODE END 4 */
 258:Core/Src/main.c **** 
 259:Core/Src/main.c **** /**
 260:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 261:Core/Src/main.c ****   * @retval None
 262:Core/Src/main.c ****   */
 263:Core/Src/main.c **** void Error_Handler(void)
 264:Core/Src/main.c **** {
 207              		.loc 1 264 1 is_stmt 1 view -0
 208              		.cfi_startproc
 209              		@ Volatile: function does not return.
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 265:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 266:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 267:Core/Src/main.c ****   __disable_irq();
 213              		.loc 1 267 3 view .LVU30
 214              	.LBB4:
 215              	.LBI4:
 216              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
ARM GAS  /tmp/cc4NsAFK.s 			page 10


  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/cc4NsAFK.s 			page 11


  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4NsAFK.s 			page 12


 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4NsAFK.s 			page 13


 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
ARM GAS  /tmp/cc4NsAFK.s 			page 14


 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
ARM GAS  /tmp/cc4NsAFK.s 			page 15


 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
ARM GAS  /tmp/cc4NsAFK.s 			page 16


 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
ARM GAS  /tmp/cc4NsAFK.s 			page 17


 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc4NsAFK.s 			page 18


 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc4NsAFK.s 			page 19


 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4NsAFK.s 			page 20


 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc4NsAFK.s 			page 21


 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
ARM GAS  /tmp/cc4NsAFK.s 			page 22


 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
ARM GAS  /tmp/cc4NsAFK.s 			page 23


 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4NsAFK.s 			page 24


 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4NsAFK.s 			page 25


 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
ARM GAS  /tmp/cc4NsAFK.s 			page 26


 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 217              		.loc 2 960 27 view .LVU31
 218              	.LBB5:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 219              		.loc 2 962 3 view .LVU32
 220              		.syntax unified
 221              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 222 0000 72B6     		cpsid i
 223              	@ 0 "" 2
 224              		.thumb
 225              		.syntax unified
 226              	.L6:
 227              	.LBE5:
 228              	.LBE4:
 268:Core/Src/main.c ****   while (1)
 229              		.loc 1 268 3 view .LVU33
 269:Core/Src/main.c ****   {
 270:Core/Src/main.c ****   }
 230              		.loc 1 270 3 view .LVU34
 268:Core/Src/main.c ****   while (1)
 231              		.loc 1 268 9 view .LVU35
 232 0002 FEE7     		b	.L6
 233              		.cfi_endproc
 234              	.LFE141:
 236              		.section	.text.SystemClock_Config,"ax",%progbits
 237              		.align	1
 238              		.global	SystemClock_Config
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 243              	SystemClock_Config:
 244              	.LFB140:
 183:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 245              		.loc 1 183 1 view -0
 246              		.cfi_startproc
ARM GAS  /tmp/cc4NsAFK.s 			page 27


 247              		@ args = 0, pretend = 0, frame = 80
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249 0000 00B5     		push	{lr}
 250              	.LCFI3:
 251              		.cfi_def_cfa_offset 4
 252              		.cfi_offset 14, -4
 253 0002 95B0     		sub	sp, sp, #84
 254              	.LCFI4:
 255              		.cfi_def_cfa_offset 88
 184:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 256              		.loc 1 184 3 view .LVU37
 184:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 257              		.loc 1 184 22 is_stmt 0 view .LVU38
 258 0004 3422     		movs	r2, #52
 259 0006 0021     		movs	r1, #0
 260 0008 07A8     		add	r0, sp, #28
 261 000a FFF7FEFF 		bl	memset
 262              	.LVL13:
 185:Core/Src/main.c **** 
 263              		.loc 1 185 3 is_stmt 1 view .LVU39
 185:Core/Src/main.c **** 
 264              		.loc 1 185 22 is_stmt 0 view .LVU40
 265 000e 0023     		movs	r3, #0
 266 0010 0293     		str	r3, [sp, #8]
 267 0012 0393     		str	r3, [sp, #12]
 268 0014 0493     		str	r3, [sp, #16]
 269 0016 0593     		str	r3, [sp, #20]
 270 0018 0693     		str	r3, [sp, #24]
 189:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 271              		.loc 1 189 3 is_stmt 1 view .LVU41
 272              	.LBB6:
 189:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 273              		.loc 1 189 3 view .LVU42
 274 001a 0093     		str	r3, [sp]
 189:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 275              		.loc 1 189 3 view .LVU43
 276 001c 204A     		ldr	r2, .L13
 277 001e 116C     		ldr	r1, [r2, #64]
 278 0020 41F08051 		orr	r1, r1, #268435456
 279 0024 1164     		str	r1, [r2, #64]
 189:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 280              		.loc 1 189 3 view .LVU44
 281 0026 126C     		ldr	r2, [r2, #64]
 282 0028 02F08052 		and	r2, r2, #268435456
 283 002c 0092     		str	r2, [sp]
 189:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 284              		.loc 1 189 3 view .LVU45
 285 002e 009A     		ldr	r2, [sp]
 286              	.LBE6:
 189:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 287              		.loc 1 189 3 view .LVU46
 190:Core/Src/main.c **** 
 288              		.loc 1 190 3 view .LVU47
 289              	.LBB7:
 190:Core/Src/main.c **** 
 290              		.loc 1 190 3 view .LVU48
 291 0030 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cc4NsAFK.s 			page 28


 190:Core/Src/main.c **** 
 292              		.loc 1 190 3 view .LVU49
 293 0032 1C4A     		ldr	r2, .L13+4
 294 0034 1368     		ldr	r3, [r2]
 295 0036 23F44043 		bic	r3, r3, #49152
 296 003a 43F48043 		orr	r3, r3, #16384
 297 003e 1360     		str	r3, [r2]
 190:Core/Src/main.c **** 
 298              		.loc 1 190 3 view .LVU50
 299 0040 1368     		ldr	r3, [r2]
 300 0042 03F44043 		and	r3, r3, #49152
 301 0046 0193     		str	r3, [sp, #4]
 190:Core/Src/main.c **** 
 302              		.loc 1 190 3 view .LVU51
 303 0048 019B     		ldr	r3, [sp, #4]
 304              	.LBE7:
 190:Core/Src/main.c **** 
 305              		.loc 1 190 3 view .LVU52
 195:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 306              		.loc 1 195 3 view .LVU53
 195:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 307              		.loc 1 195 36 is_stmt 0 view .LVU54
 308 004a 0123     		movs	r3, #1
 309 004c 0793     		str	r3, [sp, #28]
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 310              		.loc 1 196 3 is_stmt 1 view .LVU55
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 311              		.loc 1 196 30 is_stmt 0 view .LVU56
 312 004e 4FF48033 		mov	r3, #65536
 313 0052 0893     		str	r3, [sp, #32]
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 314              		.loc 1 197 3 is_stmt 1 view .LVU57
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 315              		.loc 1 197 34 is_stmt 0 view .LVU58
 316 0054 0223     		movs	r3, #2
 317 0056 0D93     		str	r3, [sp, #52]
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 318              		.loc 1 198 3 is_stmt 1 view .LVU59
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 319              		.loc 1 198 35 is_stmt 0 view .LVU60
 320 0058 4FF48002 		mov	r2, #4194304
 321 005c 0E92     		str	r2, [sp, #56]
 199:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 322              		.loc 1 199 3 is_stmt 1 view .LVU61
 199:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 323              		.loc 1 199 30 is_stmt 0 view .LVU62
 324 005e 0422     		movs	r2, #4
 325 0060 0F92     		str	r2, [sp, #60]
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 326              		.loc 1 200 3 is_stmt 1 view .LVU63
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 327              		.loc 1 200 30 is_stmt 0 view .LVU64
 328 0062 4822     		movs	r2, #72
 329 0064 1092     		str	r2, [sp, #64]
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 330              		.loc 1 201 3 is_stmt 1 view .LVU65
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 3;
ARM GAS  /tmp/cc4NsAFK.s 			page 29


 331              		.loc 1 201 30 is_stmt 0 view .LVU66
 332 0066 1193     		str	r3, [sp, #68]
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 333              		.loc 1 202 3 is_stmt 1 view .LVU67
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 334              		.loc 1 202 30 is_stmt 0 view .LVU68
 335 0068 0322     		movs	r2, #3
 336 006a 1292     		str	r2, [sp, #72]
 203:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 337              		.loc 1 203 3 is_stmt 1 view .LVU69
 203:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 338              		.loc 1 203 30 is_stmt 0 view .LVU70
 339 006c 1393     		str	r3, [sp, #76]
 204:Core/Src/main.c ****   {
 340              		.loc 1 204 3 is_stmt 1 view .LVU71
 204:Core/Src/main.c ****   {
 341              		.loc 1 204 7 is_stmt 0 view .LVU72
 342 006e 07A8     		add	r0, sp, #28
 343 0070 FFF7FEFF 		bl	HAL_RCC_OscConfig
 344              	.LVL14:
 204:Core/Src/main.c ****   {
 345              		.loc 1 204 6 discriminator 1 view .LVU73
 346 0074 80B9     		cbnz	r0, .L11
 211:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 347              		.loc 1 211 3 is_stmt 1 view .LVU74
 211:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 348              		.loc 1 211 31 is_stmt 0 view .LVU75
 349 0076 0F23     		movs	r3, #15
 350 0078 0293     		str	r3, [sp, #8]
 213:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 351              		.loc 1 213 3 is_stmt 1 view .LVU76
 213:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 352              		.loc 1 213 34 is_stmt 0 view .LVU77
 353 007a 0221     		movs	r1, #2
 354 007c 0391     		str	r1, [sp, #12]
 214:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 355              		.loc 1 214 3 is_stmt 1 view .LVU78
 214:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 356              		.loc 1 214 35 is_stmt 0 view .LVU79
 357 007e 0023     		movs	r3, #0
 358 0080 0493     		str	r3, [sp, #16]
 215:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 359              		.loc 1 215 3 is_stmt 1 view .LVU80
 215:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 360              		.loc 1 215 36 is_stmt 0 view .LVU81
 361 0082 4FF48052 		mov	r2, #4096
 362 0086 0592     		str	r2, [sp, #20]
 216:Core/Src/main.c **** 
 363              		.loc 1 216 3 is_stmt 1 view .LVU82
 216:Core/Src/main.c **** 
 364              		.loc 1 216 36 is_stmt 0 view .LVU83
 365 0088 0693     		str	r3, [sp, #24]
 218:Core/Src/main.c ****   {
 366              		.loc 1 218 3 is_stmt 1 view .LVU84
 218:Core/Src/main.c ****   {
 367              		.loc 1 218 7 is_stmt 0 view .LVU85
 368 008a 02A8     		add	r0, sp, #8
ARM GAS  /tmp/cc4NsAFK.s 			page 30


 369 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 370              	.LVL15:
 218:Core/Src/main.c ****   {
 371              		.loc 1 218 6 discriminator 1 view .LVU86
 372 0090 20B9     		cbnz	r0, .L12
 222:Core/Src/main.c **** 
 373              		.loc 1 222 1 view .LVU87
 374 0092 15B0     		add	sp, sp, #84
 375              	.LCFI5:
 376              		.cfi_remember_state
 377              		.cfi_def_cfa_offset 4
 378              		@ sp needed
 379 0094 5DF804FB 		ldr	pc, [sp], #4
 380              	.L11:
 381              	.LCFI6:
 382              		.cfi_restore_state
 206:Core/Src/main.c ****   }
 383              		.loc 1 206 5 is_stmt 1 view .LVU88
 384 0098 FFF7FEFF 		bl	Error_Handler
 385              	.LVL16:
 386              	.L12:
 220:Core/Src/main.c ****   }
 387              		.loc 1 220 5 view .LVU89
 388 009c FFF7FEFF 		bl	Error_Handler
 389              	.LVL17:
 390              	.L14:
 391              		.align	2
 392              	.L13:
 393 00a0 00380240 		.word	1073887232
 394 00a4 00700040 		.word	1073770496
 395              		.cfi_endproc
 396              	.LFE140:
 398              		.section	.text.main,"ax",%progbits
 399              		.align	1
 400              		.global	main
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 405              	main:
 406              	.LFB139:
 117:Core/Src/main.c **** 
 407              		.loc 1 117 1 view -0
 408              		.cfi_startproc
 409              		@ Volatile: function does not return.
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412 0000 08B5     		push	{r3, lr}
 413              	.LCFI7:
 414              		.cfi_def_cfa_offset 8
 415              		.cfi_offset 3, -8
 416              		.cfi_offset 14, -4
 127:Core/Src/main.c **** 
 417              		.loc 1 127 3 view .LVU91
 418 0002 FFF7FEFF 		bl	HAL_Init
 419              	.LVL18:
 134:Core/Src/main.c **** 
 420              		.loc 1 134 3 view .LVU92
ARM GAS  /tmp/cc4NsAFK.s 			page 31


 421 0006 FFF7FEFF 		bl	SystemClock_Config
 422              	.LVL19:
 142:Core/Src/main.c ****   MX_DMA_Init();
 423              		.loc 1 142 3 view .LVU93
 424 000a FFF7FEFF 		bl	MX_GPIO_Init
 425              	.LVL20:
 143:Core/Src/main.c ****   MX_I2C1_Init();
 426              		.loc 1 143 3 view .LVU94
 427 000e FFF7FEFF 		bl	MX_DMA_Init
 428              	.LVL21:
 144:Core/Src/main.c ****   MX_USART1_UART_Init();
 429              		.loc 1 144 3 view .LVU95
 430 0012 FFF7FEFF 		bl	MX_I2C1_Init
 431              	.LVL22:
 145:Core/Src/main.c ****   MX_I2S1_Init();
 432              		.loc 1 145 3 view .LVU96
 433 0016 FFF7FEFF 		bl	MX_USART1_UART_Init
 434              	.LVL23:
 146:Core/Src/main.c ****   MX_USB_DEVICE_Init();
 435              		.loc 1 146 3 view .LVU97
 436 001a FFF7FEFF 		bl	MX_I2S1_Init
 437              	.LVL24:
 147:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 438              		.loc 1 147 3 view .LVU98
 439 001e FFF7FEFF 		bl	MX_USB_DEVICE_Init
 440              	.LVL25:
 149:Core/Src/main.c **** 
 441              		.loc 1 149 3 view .LVU99
 442 0022 FFF7FEFF 		bl	RGB_LED_Init
 443              	.LVL26:
 151:Core/Src/main.c ****   ENS160_Init(&ens160,&hi2c1, ENS160_I2C_ADDR_LOW);
 444              		.loc 1 151 3 view .LVU100
 445 0026 154C     		ldr	r4, .L18
 446 0028 C022     		movs	r2, #192
 447 002a 2146     		mov	r1, r4
 448 002c 1448     		ldr	r0, .L18+4
 449 002e FFF7FEFF 		bl	VCNL4040_Init
 450              	.LVL27:
 152:Core/Src/main.c ****   HDC302x_Init(&hdc1, &hi2c1, HDC302x_ADDR_44);
 451              		.loc 1 152 3 view .LVU101
 452 0032 A422     		movs	r2, #164
 453 0034 2146     		mov	r1, r4
 454 0036 1348     		ldr	r0, .L18+8
 455 0038 FFF7FEFF 		bl	ENS160_Init
 456              	.LVL28:
 153:Core/Src/main.c ****   HDC302x_Init(&hdc2, &hi2c1, HDC302x_ADDR_45);
 457              		.loc 1 153 3 view .LVU102
 458 003c 8822     		movs	r2, #136
 459 003e 2146     		mov	r1, r4
 460 0040 1148     		ldr	r0, .L18+12
 461 0042 FFF7FEFF 		bl	HDC302x_Init
 462              	.LVL29:
 154:Core/Src/main.c ****   HDC302x_Init(&hdc3, &hi2c1, HDC302x_ADDR_46);
 463              		.loc 1 154 3 view .LVU103
 464 0046 8A22     		movs	r2, #138
 465 0048 2146     		mov	r1, r4
 466 004a 1048     		ldr	r0, .L18+16
ARM GAS  /tmp/cc4NsAFK.s 			page 32


 467 004c FFF7FEFF 		bl	HDC302x_Init
 468              	.LVL30:
 155:Core/Src/main.c ****   HDC302x_Init(&hdc4, &hi2c1, HDC302x_ADDR_47);
 469              		.loc 1 155 3 view .LVU104
 470 0050 8C22     		movs	r2, #140
 471 0052 2146     		mov	r1, r4
 472 0054 0E48     		ldr	r0, .L18+20
 473 0056 FFF7FEFF 		bl	HDC302x_Init
 474              	.LVL31:
 156:Core/Src/main.c ****   MIC_Init(&mic, &hi2s1);
 475              		.loc 1 156 3 view .LVU105
 476 005a 8E22     		movs	r2, #142
 477 005c 2146     		mov	r1, r4
 478 005e 0D48     		ldr	r0, .L18+24
 479 0060 FFF7FEFF 		bl	HDC302x_Init
 480              	.LVL32:
 157:Core/Src/main.c ****   MIC_Start(&mic);
 481              		.loc 1 157 3 view .LVU106
 482 0064 0C4C     		ldr	r4, .L18+28
 483 0066 0D49     		ldr	r1, .L18+32
 484 0068 2046     		mov	r0, r4
 485 006a FFF7FEFF 		bl	MIC_Init
 486              	.LVL33:
 158:Core/Src/main.c ****  
 487              		.loc 1 158 3 view .LVU107
 488 006e 2046     		mov	r0, r4
 489 0070 FFF7FEFF 		bl	MIC_Start
 490              	.LVL34:
 491              	.L16:
 164:Core/Src/main.c ****   {
 492              		.loc 1 164 3 view .LVU108
 168:Core/Src/main.c **** 
 493              		.loc 1 168 5 discriminator 1 view .LVU109
 494 0074 FFF7FEFF 		bl	Data_Send
 495              	.LVL35:
 164:Core/Src/main.c ****   {
 496              		.loc 1 164 9 view .LVU110
 497 0078 FCE7     		b	.L16
 498              	.L19:
 499 007a 00BF     		.align	2
 500              	.L18:
 501 007c 00000000 		.word	hi2c1
 502 0080 00000000 		.word	vcnl4040
 503 0084 00000000 		.word	ens160
 504 0088 00000000 		.word	hdc1
 505 008c 00000000 		.word	hdc2
 506 0090 00000000 		.word	hdc3
 507 0094 00000000 		.word	hdc4
 508 0098 00000000 		.word	mic
 509 009c 00000000 		.word	hi2s1
 510              		.cfi_endproc
 511              	.LFE139:
 513              		.global	mic
 514              		.section	.bss.mic,"aw",%nobits
 515              		.align	2
 518              	mic:
 519 0000 00000000 		.space	12
ARM GAS  /tmp/cc4NsAFK.s 			page 33


 519      00000000 
 519      00000000 
 520              		.global	hdc4
 521              		.section	.bss.hdc4,"aw",%nobits
 522              		.align	2
 525              	hdc4:
 526 0000 00000000 		.space	8
 526      00000000 
 527              		.global	hdc3
 528              		.section	.bss.hdc3,"aw",%nobits
 529              		.align	2
 532              	hdc3:
 533 0000 00000000 		.space	8
 533      00000000 
 534              		.global	hdc2
 535              		.section	.bss.hdc2,"aw",%nobits
 536              		.align	2
 539              	hdc2:
 540 0000 00000000 		.space	8
 540      00000000 
 541              		.global	hdc1
 542              		.section	.bss.hdc1,"aw",%nobits
 543              		.align	2
 546              	hdc1:
 547 0000 00000000 		.space	8
 547      00000000 
 548              		.global	ens160
 549              		.section	.bss.ens160,"aw",%nobits
 550              		.align	2
 553              	ens160:
 554 0000 00000000 		.space	8
 554      00000000 
 555              		.global	vcnl4040
 556              		.section	.bss.vcnl4040,"aw",%nobits
 557              		.align	2
 560              	vcnl4040:
 561 0000 00000000 		.space	8
 561      00000000 
 562              		.text
 563              	.Letext0:
 564              		.file 3 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 565              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 566              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 567              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 568              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 569              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 570              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 571              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2s.h"
 572              		.file 11 "Core/Inc/i2c.h"
 573              		.file 12 "Core/Inc/i2s.h"
 574              		.file 13 "Core/Inc/vcnl4040_sensor.h"
 575              		.file 14 "Core/Inc/ens160_sensor.h"
 576              		.file 15 "Core/Inc/humidity_temp_sensor.h"
 577              		.file 16 "Core/Inc/microphone_sensor.h"
 578              		.file 17 "Core/Inc/methods.h"
 579              		.file 18 "USB_DEVICE/App/usb_device.h"
 580              		.file 19 "Core/Inc/usart.h"
ARM GAS  /tmp/cc4NsAFK.s 			page 34


 581              		.file 20 "Core/Inc/dma.h"
 582              		.file 21 "Core/Inc/gpio.h"
 583              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 584              		.file 23 "<built-in>"
ARM GAS  /tmp/cc4NsAFK.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc4NsAFK.s:21     .rodata.Data_Send.str1.4:00000000 $d
     /tmp/cc4NsAFK.s:34     .text.Data_Send:00000000 $t
     /tmp/cc4NsAFK.s:40     .text.Data_Send:00000000 Data_Send
     /tmp/cc4NsAFK.s:184    .text.Data_Send:00000118 $d
     /tmp/cc4NsAFK.s:553    .bss.ens160:00000000 ens160
     /tmp/cc4NsAFK.s:560    .bss.vcnl4040:00000000 vcnl4040
     /tmp/cc4NsAFK.s:546    .bss.hdc1:00000000 hdc1
     /tmp/cc4NsAFK.s:539    .bss.hdc2:00000000 hdc2
     /tmp/cc4NsAFK.s:532    .bss.hdc3:00000000 hdc3
     /tmp/cc4NsAFK.s:525    .bss.hdc4:00000000 hdc4
     /tmp/cc4NsAFK.s:518    .bss.mic:00000000 mic
     /tmp/cc4NsAFK.s:199    .text.Error_Handler:00000000 $t
     /tmp/cc4NsAFK.s:205    .text.Error_Handler:00000000 Error_Handler
     /tmp/cc4NsAFK.s:237    .text.SystemClock_Config:00000000 $t
     /tmp/cc4NsAFK.s:243    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc4NsAFK.s:393    .text.SystemClock_Config:000000a0 $d
     /tmp/cc4NsAFK.s:399    .text.main:00000000 $t
     /tmp/cc4NsAFK.s:405    .text.main:00000000 main
     /tmp/cc4NsAFK.s:501    .text.main:0000007c $d
     /tmp/cc4NsAFK.s:515    .bss.mic:00000000 $d
     /tmp/cc4NsAFK.s:522    .bss.hdc4:00000000 $d
     /tmp/cc4NsAFK.s:529    .bss.hdc3:00000000 $d
     /tmp/cc4NsAFK.s:536    .bss.hdc2:00000000 $d
     /tmp/cc4NsAFK.s:543    .bss.hdc1:00000000 $d
     /tmp/cc4NsAFK.s:550    .bss.ens160:00000000 $d
     /tmp/cc4NsAFK.s:557    .bss.vcnl4040:00000000 $d

UNDEFINED SYMBOLS
ENS160_ReadAQI
ENS160_ReadTVOC
ENS160_ReadECO2
VCNL4040_ReadALS
VCNL4040_ReadPS
HDC302x_ReadData
USB_Print
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_I2C1_Init
MX_USART1_UART_Init
MX_I2S1_Init
MX_USB_DEVICE_Init
RGB_LED_Init
VCNL4040_Init
ENS160_Init
HDC302x_Init
MIC_Init
MIC_Start
hi2c1
hi2s1
