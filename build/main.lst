ARM GAS  /tmp/ccqA6WvH.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.HAL_I2S_RxHalfCpltCallback,"ax",%progbits
  21              		.align	1
  22              		.global	HAL_I2S_RxHalfCpltCallback
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	HAL_I2S_RxHalfCpltCallback:
  28              	.LVL0:
  29              	.LFB137:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "dma.h"
  22:Core/Src/main.c **** #include "i2c.h"
  23:Core/Src/main.c **** #include "i2s.h"
  24:Core/Src/main.c **** #include "usart.h"
  25:Core/Src/main.c **** #include "gpio.h"
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  29:Core/Src/main.c **** #include <stdarg.h>
ARM GAS  /tmp/ccqA6WvH.s 			page 2


  30:Core/Src/main.c **** #include <string.h>
  31:Core/Src/main.c **** #include <stdio.h>
  32:Core/Src/main.c **** #include "vcnl4040_sensor.h"
  33:Core/Src/main.c **** #include "ens160_sensor.h"
  34:Core/Src/main.c **** #include "humidity_temp_sensor.h"
  35:Core/Src/main.c **** #include "microphone_sensor.h"
  36:Core/Src/main.c **** #include <stdlib.h>
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END Includes */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE END PTD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  47:Core/Src/main.c **** /* USER CODE BEGIN PD */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE END PD */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  52:Core/Src/main.c **** /* USER CODE BEGIN PM */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE END PM */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* USER CODE BEGIN PV */
  59:Core/Src/main.c **** extern I2C_HandleTypeDef hi2c2;
  60:Core/Src/main.c **** extern I2S_HandleTypeDef hi2s1;  // 例如使用 I2S1
  61:Core/Src/main.c **** extern UART_HandleTypeDef huart1; 
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** uint32_t dma[4];
  64:Core/Src/main.c **** int32_t sample;
  65:Core/Src/main.c **** uint8_t ready=0;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** VCNL4040_HandleTypeDef vcnl4040;
  69:Core/Src/main.c **** ENS160_HandleTypeDef ens160;
  70:Core/Src/main.c **** HDC302x_HandleTypeDef hdc1, hdc2, hdc3, hdc4;
  71:Core/Src/main.c **** // MIC_HandleTypeDef mic;
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* USER CODE END PV */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  77:Core/Src/main.c **** void SystemClock_Config(void);
  78:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** void RGB_LED_Init(void);
  81:Core/Src/main.c **** void RGB_LED_Blink(void);
  82:Core/Src/main.c **** void Debug_Print(const char *format, ...);
  83:Core/Src/main.c **** void I2C_Scan(void);
  84:Core/Src/main.c **** void Send_Raw_Bytes(uint16_t data);
  85:Core/Src/main.c **** void Send_Buffer_Bytes(uint16_t *buffer, uint16_t count);
  86:Core/Src/main.c **** 
ARM GAS  /tmp/ccqA6WvH.s 			page 3


  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
  89:Core/Src/main.c **** {
  30              		.loc 1 89 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  90:Core/Src/main.c ****   if (hi2s == &hi2s1)
  35              		.loc 1 90 3 view .LVU1
  36              		.loc 1 90 6 is_stmt 0 view .LVU2
  37 0000 0D4B     		ldr	r3, .L6
  38 0002 8342     		cmp	r3, r0
  39 0004 00D0     		beq	.L5
  40              	.L1:
  91:Core/Src/main.c ****   {
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****     static uint16_t cb_cnt = 0;
  94:Core/Src/main.c ****     cb_cnt++; // 回调次数计数
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****     uint32_t val = (dma[0]<<8) + (dma[1]>>8);
  97:Core/Src/main.c ****     if (val & 0x800000)
  98:Core/Src/main.c ****       sample = val | 0xFF000000; // 符号扩展
  99:Core/Src/main.c ****     else
 100:Core/Src/main.c ****       sample = val;
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****     ready = 1;
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****     // if (cb_cnt % 10 == 0)
 105:Core/Src/main.c ****     //   Debug_Print("%d\n", sample);
 106:Core/Src/main.c ****   }
 107:Core/Src/main.c **** }
  41              		.loc 1 107 1 view .LVU3
  42 0006 7047     		bx	lr
  43              	.L5:
  44              	.LBB4:
  93:Core/Src/main.c ****     cb_cnt++; // 回调次数计数
  45              		.loc 1 93 5 is_stmt 1 view .LVU4
  94:Core/Src/main.c **** 
  46              		.loc 1 94 5 view .LVU5
  94:Core/Src/main.c **** 
  47              		.loc 1 94 11 is_stmt 0 view .LVU6
  48 0008 0C4A     		ldr	r2, .L6+4
  49 000a 1388     		ldrh	r3, [r2]
  50 000c 0133     		adds	r3, r3, #1
  51 000e 1380     		strh	r3, [r2]	@ movhi
  96:Core/Src/main.c ****     if (val & 0x800000)
  52              		.loc 1 96 5 is_stmt 1 view .LVU7
  96:Core/Src/main.c ****     if (val & 0x800000)
  53              		.loc 1 96 24 is_stmt 0 view .LVU8
  54 0010 0B4B     		ldr	r3, .L6+8
  55 0012 1A68     		ldr	r2, [r3]
  96:Core/Src/main.c ****     if (val & 0x800000)
  56              		.loc 1 96 38 view .LVU9
  57 0014 5B68     		ldr	r3, [r3, #4]
  96:Core/Src/main.c ****     if (val & 0x800000)
  58              		.loc 1 96 41 view .LVU10
ARM GAS  /tmp/ccqA6WvH.s 			page 4


  59 0016 1B0A     		lsrs	r3, r3, #8
  96:Core/Src/main.c ****     if (val & 0x800000)
  60              		.loc 1 96 14 view .LVU11
  61 0018 03EB0223 		add	r3, r3, r2, lsl #8
  62              	.LVL1:
  97:Core/Src/main.c ****       sample = val | 0xFF000000; // 符号扩展
  63              		.loc 1 97 5 is_stmt 1 view .LVU12
  97:Core/Src/main.c ****       sample = val | 0xFF000000; // 符号扩展
  64              		.loc 1 97 8 is_stmt 0 view .LVU13
  65 001c 13F4000F 		tst	r3, #8388608
  66 0020 07D0     		beq	.L3
  98:Core/Src/main.c ****     else
  67              		.loc 1 98 7 is_stmt 1 view .LVU14
  98:Core/Src/main.c ****     else
  68              		.loc 1 98 20 is_stmt 0 view .LVU15
  69 0022 43F07F43 		orr	r3, r3, #-16777216
  70              	.LVL2:
  98:Core/Src/main.c ****     else
  71              		.loc 1 98 14 view .LVU16
  72 0026 074A     		ldr	r2, .L6+12
  73              	.LVL3:
  98:Core/Src/main.c ****     else
  74              		.loc 1 98 14 view .LVU17
  75 0028 1360     		str	r3, [r2]
  76              	.L4:
 102:Core/Src/main.c **** 
  77              		.loc 1 102 5 is_stmt 1 view .LVU18
 102:Core/Src/main.c **** 
  78              		.loc 1 102 11 is_stmt 0 view .LVU19
  79 002a 074B     		ldr	r3, .L6+16
  80 002c 0122     		movs	r2, #1
  81 002e 1A70     		strb	r2, [r3]
  82              	.LBE4:
  83              		.loc 1 107 1 view .LVU20
  84 0030 E9E7     		b	.L1
  85              	.LVL4:
  86              	.L3:
  87              	.LBB5:
 100:Core/Src/main.c **** 
  88              		.loc 1 100 7 is_stmt 1 view .LVU21
 100:Core/Src/main.c **** 
  89              		.loc 1 100 14 is_stmt 0 view .LVU22
  90 0032 044A     		ldr	r2, .L6+12
  91 0034 1360     		str	r3, [r2]
  92 0036 F8E7     		b	.L4
  93              	.L7:
  94              		.align	2
  95              	.L6:
  96 0038 00000000 		.word	hi2s1
  97 003c 00000000 		.word	cb_cnt.0
  98 0040 00000000 		.word	dma
  99 0044 00000000 		.word	sample
 100 0048 00000000 		.word	ready
 101              	.LBE5:
 102              		.cfi_endproc
 103              	.LFE137:
 105              		.section	.text.RGB_LED_Init,"ax",%progbits
ARM GAS  /tmp/ccqA6WvH.s 			page 5


 106              		.align	1
 107              		.global	RGB_LED_Init
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 112              	RGB_LED_Init:
 113              	.LFB140:
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** /* USER CODE END PFP */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 113:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** /* USER CODE END 0 */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /**
 118:Core/Src/main.c ****   * @brief  The application entry point.
 119:Core/Src/main.c ****   * @retval int
 120:Core/Src/main.c ****   */
 121:Core/Src/main.c **** int main(void)
 122:Core/Src/main.c **** {
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* USER CODE END 1 */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 131:Core/Src/main.c ****   HAL_Init();
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   /* USER CODE END Init */
 136:Core/Src/main.c **** 
 137:Core/Src/main.c ****   /* Configure the system clock */
 138:Core/Src/main.c ****   SystemClock_Config();
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 141:Core/Src/main.c **** 
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* USER CODE END SysInit */
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* Initialize all configured peripherals */
 146:Core/Src/main.c ****   MX_GPIO_Init();
 147:Core/Src/main.c ****   MX_DMA_Init();
 148:Core/Src/main.c ****   MX_I2C1_Init();
 149:Core/Src/main.c ****   MX_USART1_UART_Init();
 150:Core/Src/main.c ****   MX_I2S1_Init();
 151:Core/Src/main.c ****   MX_I2C2_Init();
 152:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 153:Core/Src/main.c ****   RGB_LED_Init();
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   VCNL4040_Init(&vcnl4040, &hi2c1, VCNL4040_I2C_ADDR_8BIT);
 156:Core/Src/main.c ****   ENS160_Init(&ens160,&hi2c1, ENS160_I2C_ADDR_LOW);
 157:Core/Src/main.c ****   HDC302x_Init(&hdc1, &hi2c1, HDC302x_ADDR_44);
ARM GAS  /tmp/ccqA6WvH.s 			page 6


 158:Core/Src/main.c ****   HDC302x_Init(&hdc2, &hi2c1, HDC302x_ADDR_45);
 159:Core/Src/main.c ****   HDC302x_Init(&hdc3, &hi2c1, HDC302x_ADDR_46);
 160:Core/Src/main.c ****   HDC302x_Init(&hdc4, &hi2c1, HDC302x_ADDR_47);
 161:Core/Src/main.c ****   // MIC_Init(&mic, &hi2s1);
 162:Core/Src/main.c ****   // MIC_Start(&mic);
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   HAL_I2S_Receive_DMA(&hi2s1, (uint16_t*)dma, 4);
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   
 167:Core/Src/main.c ****  
 168:Core/Src/main.c **** 
 169:Core/Src/main.c ****   /* USER CODE END 2 */
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****   /* Infinite loop */
 172:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 173:Core/Src/main.c ****   while (1)
 174:Core/Src/main.c ****   {
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****     /* USER CODE END WHILE */
 177:Core/Src/main.c ****     // uint8_t aqi;
 178:Core/Src/main.c ****     // uint16_t tvoc, eco2;
 179:Core/Src/main.c ****     // ENS160_ReadAQI(&ens160, &aqi);
 180:Core/Src/main.c ****     // ENS160_ReadTVOC(&ens160, &tvoc);
 181:Core/Src/main.c ****     // ENS160_ReadECO2(&ens160, &eco2);
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****     // Debug_Print("%d,%d,%d\n", aqi, tvoc, eco2);
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****     // uint16_t als, ps;
 186:Core/Src/main.c ****     // VCNL4040_ReadALS(&vcnl4040, &als);
 187:Core/Src/main.c ****     // VCNL4040_ReadPS(&vcnl4040, &ps);
 188:Core/Src/main.c ****     // Debug_Print("%u,%u\n", als, ps);
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****     float T1, H1, T2, H2, T3, H3, T4, H4;
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****     HDC302x_ReadData(&hdc1, &T1, &H1);
 193:Core/Src/main.c ****     HDC302x_ReadData(&hdc2, &T2, &H2);
 194:Core/Src/main.c ****     HDC302x_ReadData(&hdc3, &T3, &H3);
 195:Core/Src/main.c ****     HDC302x_ReadData(&hdc4, &T4, &H4);
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****     Debug_Print("%.2f,%.1f,%.2f,%.1f,", T1, H1, T2, H2);
 198:Core/Src/main.c ****     Debug_Print("%.2f,%.1f,%.2f,%.1f\n", T3, H3, T4, H4);
 199:Core/Src/main.c ****     // printf("[S3] T=%.2f°C RH=%.1f%% | [S4] T=%.2f°C RH=%.1f%%\r\n", T3, H3, T4, H4);
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****     HAL_Delay(10);
 202:Core/Src/main.c **** 
 203:Core/Src/main.c **** 
 204:Core/Src/main.c **** 
 205:Core/Src/main.c **** 
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 208:Core/Src/main.c ****   }
 209:Core/Src/main.c ****   /* USER CODE END 3 */
 210:Core/Src/main.c **** }
 211:Core/Src/main.c **** 
 212:Core/Src/main.c **** /**
 213:Core/Src/main.c ****   * @brief System Clock Configuration
 214:Core/Src/main.c ****   * @retval None
ARM GAS  /tmp/ccqA6WvH.s 			page 7


 215:Core/Src/main.c ****   */
 216:Core/Src/main.c **** void SystemClock_Config(void)
 217:Core/Src/main.c **** {
 218:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 219:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 222:Core/Src/main.c ****   */
 223:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 224:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 227:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 228:Core/Src/main.c ****   */
 229:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 230:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 233:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 234:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 235:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 236:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 237:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 238:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 239:Core/Src/main.c ****   {
 240:Core/Src/main.c ****     Error_Handler();
 241:Core/Src/main.c ****   }
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 244:Core/Src/main.c ****   */
 245:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 246:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 247:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 248:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 249:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 250:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 253:Core/Src/main.c ****   {
 254:Core/Src/main.c ****     Error_Handler();
 255:Core/Src/main.c ****   }
 256:Core/Src/main.c **** }
 257:Core/Src/main.c **** 
 258:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 259:Core/Src/main.c **** void RGB_LED_Init(void)
 260:Core/Src/main.c **** {
 114              		.loc 1 260 1 is_stmt 1 view -0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 24
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118 0000 70B5     		push	{r4, r5, r6, lr}
 119              	.LCFI0:
 120              		.cfi_def_cfa_offset 16
 121              		.cfi_offset 4, -16
 122              		.cfi_offset 5, -12
 123              		.cfi_offset 6, -8
 124              		.cfi_offset 14, -4
ARM GAS  /tmp/ccqA6WvH.s 			page 8


 125 0002 86B0     		sub	sp, sp, #24
 126              	.LCFI1:
 127              		.cfi_def_cfa_offset 40
 261:Core/Src/main.c ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
 128              		.loc 1 261 5 view .LVU24
 129              		.loc 1 261 22 is_stmt 0 view .LVU25
 130 0004 0024     		movs	r4, #0
 131 0006 0194     		str	r4, [sp, #4]
 132 0008 0294     		str	r4, [sp, #8]
 133 000a 0394     		str	r4, [sp, #12]
 134 000c 0494     		str	r4, [sp, #16]
 135 000e 0594     		str	r4, [sp, #20]
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****     // Enable GPIOC clock
 264:Core/Src/main.c ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 136              		.loc 1 264 5 is_stmt 1 view .LVU26
 137              	.LBB6:
 138              		.loc 1 264 5 view .LVU27
 139 0010 0094     		str	r4, [sp]
 140              		.loc 1 264 5 view .LVU28
 141 0012 0D4B     		ldr	r3, .L10
 142 0014 1A6B     		ldr	r2, [r3, #48]
 143 0016 42F00402 		orr	r2, r2, #4
 144 001a 1A63     		str	r2, [r3, #48]
 145              		.loc 1 264 5 view .LVU29
 146 001c 1B6B     		ldr	r3, [r3, #48]
 147 001e 03F00403 		and	r3, r3, #4
 148 0022 0093     		str	r3, [sp]
 149              		.loc 1 264 5 view .LVU30
 150 0024 009B     		ldr	r3, [sp]
 151              	.LBE6:
 152              		.loc 1 264 5 view .LVU31
 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****     // Configure PC0, PC1, PC2 as output pins
 267:Core/Src/main.c ****     GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 153              		.loc 1 267 5 view .LVU32
 154              		.loc 1 267 25 is_stmt 0 view .LVU33
 155 0026 0726     		movs	r6, #7
 156 0028 0196     		str	r6, [sp, #4]
 268:Core/Src/main.c ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 157              		.loc 1 268 5 is_stmt 1 view .LVU34
 158              		.loc 1 268 26 is_stmt 0 view .LVU35
 159 002a 0123     		movs	r3, #1
 160 002c 0293     		str	r3, [sp, #8]
 269:Core/Src/main.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 161              		.loc 1 269 5 is_stmt 1 view .LVU36
 270:Core/Src/main.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 162              		.loc 1 270 5 view .LVU37
 271:Core/Src/main.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 163              		.loc 1 271 5 view .LVU38
 164 002e 074D     		ldr	r5, .L10+4
 165 0030 01A9     		add	r1, sp, #4
 166 0032 2846     		mov	r0, r5
 167 0034 FFF7FEFF 		bl	HAL_GPIO_Init
 168              	.LVL5:
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****     // Turn off all LEDs initially
ARM GAS  /tmp/ccqA6WvH.s 			page 9


 274:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 169              		.loc 1 274 5 view .LVU39
 170 0038 2246     		mov	r2, r4
 171 003a 3146     		mov	r1, r6
 172 003c 2846     		mov	r0, r5
 173 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 174              	.LVL6:
 275:Core/Src/main.c **** }
 175              		.loc 1 275 1 is_stmt 0 view .LVU40
 176 0042 06B0     		add	sp, sp, #24
 177              	.LCFI2:
 178              		.cfi_def_cfa_offset 16
 179              		@ sp needed
 180 0044 70BD     		pop	{r4, r5, r6, pc}
 181              	.L11:
 182 0046 00BF     		.align	2
 183              	.L10:
 184 0048 00380240 		.word	1073887232
 185 004c 00080240 		.word	1073874944
 186              		.cfi_endproc
 187              	.LFE140:
 189              		.section	.text.RGB_LED_Blink,"ax",%progbits
 190              		.align	1
 191              		.global	RGB_LED_Blink
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 196              	RGB_LED_Blink:
 197              	.LFB141:
 276:Core/Src/main.c **** void RGB_LED_Blink(void)
 277:Core/Src/main.c **** {
 198              		.loc 1 277 1 is_stmt 1 view -0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202 0000 10B5     		push	{r4, lr}
 203              	.LCFI3:
 204              		.cfi_def_cfa_offset 8
 205              		.cfi_offset 4, -8
 206              		.cfi_offset 14, -4
 278:Core/Src/main.c ****     // Red
 279:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 207              		.loc 1 279 5 view .LVU42
 208 0002 144C     		ldr	r4, .L14
 209 0004 0122     		movs	r2, #1
 210 0006 1146     		mov	r1, r2
 211 0008 2046     		mov	r0, r4
 212 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 213              	.LVL7:
 280:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 214              		.loc 1 280 5 view .LVU43
 215 000e 0022     		movs	r2, #0
 216 0010 0621     		movs	r1, #6
 217 0012 2046     		mov	r0, r4
 218 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 219              	.LVL8:
 281:Core/Src/main.c ****     HAL_Delay(100);
ARM GAS  /tmp/ccqA6WvH.s 			page 10


 220              		.loc 1 281 5 view .LVU44
 221 0018 6420     		movs	r0, #100
 222 001a FFF7FEFF 		bl	HAL_Delay
 223              	.LVL9:
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****     // Green
 284:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 224              		.loc 1 284 5 view .LVU45
 225 001e 0122     		movs	r2, #1
 226 0020 0221     		movs	r1, #2
 227 0022 2046     		mov	r0, r4
 228 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 229              	.LVL10:
 285:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_2, GPIO_PIN_RESET);
 230              		.loc 1 285 5 view .LVU46
 231 0028 0022     		movs	r2, #0
 232 002a 0521     		movs	r1, #5
 233 002c 2046     		mov	r0, r4
 234 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 235              	.LVL11:
 286:Core/Src/main.c ****     HAL_Delay(100);
 236              		.loc 1 286 5 view .LVU47
 237 0032 6420     		movs	r0, #100
 238 0034 FFF7FEFF 		bl	HAL_Delay
 239              	.LVL12:
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****     // Blue
 289:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 240              		.loc 1 289 5 view .LVU48
 241 0038 0122     		movs	r2, #1
 242 003a 0421     		movs	r1, #4
 243 003c 2046     		mov	r0, r4
 244 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 245              	.LVL13:
 290:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 246              		.loc 1 290 5 view .LVU49
 247 0042 0022     		movs	r2, #0
 248 0044 0321     		movs	r1, #3
 249 0046 2046     		mov	r0, r4
 250 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 251              	.LVL14:
 291:Core/Src/main.c ****     HAL_Delay(100);
 252              		.loc 1 291 5 view .LVU50
 253 004c 6420     		movs	r0, #100
 254 004e FFF7FEFF 		bl	HAL_Delay
 255              	.LVL15:
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****     // // White (all on)
 294:Core/Src/main.c ****     // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_SET);
 295:Core/Src/main.c ****     // HAL_Delay(200);
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****     // // Off
 298:Core/Src/main.c ****     // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 299:Core/Src/main.c ****     // HAL_Delay(200);
 300:Core/Src/main.c **** }
 256              		.loc 1 300 1 is_stmt 0 view .LVU51
 257 0052 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccqA6WvH.s 			page 11


 258              	.L15:
 259              		.align	2
 260              	.L14:
 261 0054 00080240 		.word	1073874944
 262              		.cfi_endproc
 263              	.LFE141:
 265              		.section	.text.Debug_Print,"ax",%progbits
 266              		.align	1
 267              		.global	Debug_Print
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 272              	Debug_Print:
 273              	.LVL16:
 274              	.LFB142:
 301:Core/Src/main.c **** 
 302:Core/Src/main.c **** 
 303:Core/Src/main.c **** void Debug_Print(const char *format, ...)
 304:Core/Src/main.c **** {
 275              		.loc 1 304 1 is_stmt 1 view -0
 276              		.cfi_startproc
 277              		@ args = 4, pretend = 16, frame = 136
 278              		@ frame_needed = 0, uses_anonymous_args = 1
 279              		.loc 1 304 1 is_stmt 0 view .LVU53
 280 0000 0FB4     		push	{r0, r1, r2, r3}
 281              	.LCFI4:
 282              		.cfi_def_cfa_offset 16
 283              		.cfi_offset 0, -16
 284              		.cfi_offset 1, -12
 285              		.cfi_offset 2, -8
 286              		.cfi_offset 3, -4
 287 0002 00B5     		push	{lr}
 288              	.LCFI5:
 289              		.cfi_def_cfa_offset 20
 290              		.cfi_offset 14, -20
 291 0004 A3B0     		sub	sp, sp, #140
 292              	.LCFI6:
 293              		.cfi_def_cfa_offset 160
 294 0006 24AB     		add	r3, sp, #144
 295 0008 53F8042B 		ldr	r2, [r3], #4
 305:Core/Src/main.c ****     char buffer[128];
 296              		.loc 1 305 5 is_stmt 1 view .LVU54
 306:Core/Src/main.c ****     va_list args;
 297              		.loc 1 306 5 view .LVU55
 307:Core/Src/main.c ****     va_start(args, format);
 298              		.loc 1 307 5 view .LVU56
 299 000c 0193     		str	r3, [sp, #4]
 308:Core/Src/main.c ****     vsnprintf(buffer, sizeof(buffer), format, args);
 300              		.loc 1 308 5 view .LVU57
 301 000e 8021     		movs	r1, #128
 302 0010 02A8     		add	r0, sp, #8
 303 0012 FFF7FEFF 		bl	vsnprintf
 304              	.LVL17:
 309:Core/Src/main.c ****     va_end(args);
 305              		.loc 1 309 5 view .LVU58
 310:Core/Src/main.c ****     // 发送格式化的字符串通过UART
 311:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 100);
ARM GAS  /tmp/ccqA6WvH.s 			page 12


 306              		.loc 1 311 5 view .LVU59
 307              		.loc 1 311 51 is_stmt 0 view .LVU60
 308 0016 02A8     		add	r0, sp, #8
 309 0018 FFF7FEFF 		bl	strlen
 310              	.LVL18:
 311              		.loc 1 311 5 discriminator 1 view .LVU61
 312 001c 6423     		movs	r3, #100
 313 001e 82B2     		uxth	r2, r0
 314 0020 02A9     		add	r1, sp, #8
 315 0022 0448     		ldr	r0, .L18
 316 0024 FFF7FEFF 		bl	HAL_UART_Transmit
 317              	.LVL19:
 312:Core/Src/main.c **** }
 318              		.loc 1 312 1 view .LVU62
 319 0028 23B0     		add	sp, sp, #140
 320              	.LCFI7:
 321              		.cfi_def_cfa_offset 20
 322              		@ sp needed
 323 002a 5DF804EB 		ldr	lr, [sp], #4
 324              	.LCFI8:
 325              		.cfi_restore 14
 326              		.cfi_def_cfa_offset 16
 327 002e 04B0     		add	sp, sp, #16
 328              	.LCFI9:
 329              		.cfi_restore 3
 330              		.cfi_restore 2
 331              		.cfi_restore 1
 332              		.cfi_restore 0
 333              		.cfi_def_cfa_offset 0
 334 0030 7047     		bx	lr
 335              	.L19:
 336 0032 00BF     		.align	2
 337              	.L18:
 338 0034 00000000 		.word	huart1
 339              		.cfi_endproc
 340              	.LFE142:
 342              		.section	.text.Send_Raw_Bytes,"ax",%progbits
 343              		.align	1
 344              		.global	Send_Raw_Bytes
 345              		.syntax unified
 346              		.thumb
 347              		.thumb_func
 349              	Send_Raw_Bytes:
 350              	.LVL20:
 351              	.LFB143:
 313:Core/Src/main.c **** void Send_Raw_Bytes(uint16_t data)
 314:Core/Src/main.c **** {
 352              		.loc 1 314 1 is_stmt 1 view -0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 8
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              		.loc 1 314 1 is_stmt 0 view .LVU64
 357 0000 00B5     		push	{lr}
 358              	.LCFI10:
 359              		.cfi_def_cfa_offset 4
 360              		.cfi_offset 14, -4
 361 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccqA6WvH.s 			page 13


 362              	.LCFI11:
 363              		.cfi_def_cfa_offset 16
 315:Core/Src/main.c ****     uint8_t bytes[2];
 364              		.loc 1 315 5 is_stmt 1 view .LVU65
 316:Core/Src/main.c ****     
 317:Core/Src/main.c ****     // 将16位数据拆分为2个字节
 318:Core/Src/main.c ****     bytes[0] = (uint8_t)(data & 0xFF);        // 低字节 (LSB)
 365              		.loc 1 318 5 view .LVU66
 366              		.loc 1 318 14 is_stmt 0 view .LVU67
 367 0004 8DF80400 		strb	r0, [sp, #4]
 319:Core/Src/main.c ****     bytes[1] = (uint8_t)((data >> 8) & 0xFF); // 高字节 (MSB)
 368              		.loc 1 319 5 is_stmt 1 view .LVU68
 369              		.loc 1 319 16 is_stmt 0 view .LVU69
 370 0008 000A     		lsrs	r0, r0, #8
 371              	.LVL21:
 372              		.loc 1 319 14 view .LVU70
 373 000a 8DF80500 		strb	r0, [sp, #5]
 320:Core/Src/main.c ****     
 321:Core/Src/main.c ****     // 发送字节数据
 322:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, bytes, 2, HAL_MAX_DELAY);
 374              		.loc 1 322 5 is_stmt 1 view .LVU71
 375 000e 4FF0FF33 		mov	r3, #-1
 376 0012 0222     		movs	r2, #2
 377 0014 01A9     		add	r1, sp, #4
 378 0016 0348     		ldr	r0, .L22
 379 0018 FFF7FEFF 		bl	HAL_UART_Transmit
 380              	.LVL22:
 323:Core/Src/main.c **** }
 381              		.loc 1 323 1 is_stmt 0 view .LVU72
 382 001c 03B0     		add	sp, sp, #12
 383              	.LCFI12:
 384              		.cfi_def_cfa_offset 4
 385              		@ sp needed
 386 001e 5DF804FB 		ldr	pc, [sp], #4
 387              	.L23:
 388 0022 00BF     		.align	2
 389              	.L22:
 390 0024 00000000 		.word	huart1
 391              		.cfi_endproc
 392              	.LFE143:
 394              		.section	.text.Send_Buffer_Bytes,"ax",%progbits
 395              		.align	1
 396              		.global	Send_Buffer_Bytes
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 401              	Send_Buffer_Bytes:
 402              	.LVL23:
 403              	.LFB144:
 324:Core/Src/main.c **** 
 325:Core/Src/main.c **** void Send_Buffer_Bytes(uint16_t *buffer, uint16_t count)
 326:Core/Src/main.c **** {
 404              		.loc 1 326 1 is_stmt 1 view -0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 0
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408              		.loc 1 326 1 is_stmt 0 view .LVU74
ARM GAS  /tmp/ccqA6WvH.s 			page 14


 409 0000 70B5     		push	{r4, r5, r6, lr}
 410              	.LCFI13:
 411              		.cfi_def_cfa_offset 16
 412              		.cfi_offset 4, -16
 413              		.cfi_offset 5, -12
 414              		.cfi_offset 6, -8
 415              		.cfi_offset 14, -4
 416 0002 0646     		mov	r6, r0
 417 0004 0D46     		mov	r5, r1
 327:Core/Src/main.c ****     for (uint16_t i = 0; i < count; i++)
 418              		.loc 1 327 5 is_stmt 1 view .LVU75
 419              	.LBB7:
 420              		.loc 1 327 10 view .LVU76
 421              	.LVL24:
 422              		.loc 1 327 19 is_stmt 0 view .LVU77
 423 0006 0024     		movs	r4, #0
 424              		.loc 1 327 5 view .LVU78
 425 0008 05E0     		b	.L25
 426              	.LVL25:
 427              	.L26:
 328:Core/Src/main.c ****     {
 329:Core/Src/main.c ****         Send_Raw_Bytes(buffer[i]);
 428              		.loc 1 329 9 is_stmt 1 view .LVU79
 429 000a 36F81400 		ldrh	r0, [r6, r4, lsl #1]
 430 000e FFF7FEFF 		bl	Send_Raw_Bytes
 431              	.LVL26:
 327:Core/Src/main.c ****     for (uint16_t i = 0; i < count; i++)
 432              		.loc 1 327 38 discriminator 3 view .LVU80
 433 0012 0134     		adds	r4, r4, #1
 434              	.LVL27:
 327:Core/Src/main.c ****     for (uint16_t i = 0; i < count; i++)
 435              		.loc 1 327 38 is_stmt 0 discriminator 3 view .LVU81
 436 0014 A4B2     		uxth	r4, r4
 437              	.LVL28:
 438              	.L25:
 327:Core/Src/main.c ****     for (uint16_t i = 0; i < count; i++)
 439              		.loc 1 327 28 is_stmt 1 discriminator 1 view .LVU82
 440 0016 AC42     		cmp	r4, r5
 441 0018 F7D3     		bcc	.L26
 442              	.LBE7:
 330:Core/Src/main.c ****     }
 331:Core/Src/main.c **** }
 443              		.loc 1 331 1 is_stmt 0 view .LVU83
 444 001a 70BD     		pop	{r4, r5, r6, pc}
 445              		.loc 1 331 1 view .LVU84
 446              		.cfi_endproc
 447              	.LFE144:
 449              		.section	.rodata.I2C_Scan.str1.4,"aMS",%progbits,1
 450              		.align	2
 451              	.LC0:
 452 0000 53746172 		.ascii	"Starting I2C scan...\015\012\000"
 452      74696E67 
 452      20493243 
 452      20736361 
 452      6E2E2E2E 
 453 0017 00       		.align	2
 454              	.LC1:
ARM GAS  /tmp/ccqA6WvH.s 			page 15


 455 0018 49324320 		.ascii	"I2C device found at address: 0x%02X\015\012\000"
 455      64657669 
 455      63652066 
 455      6F756E64 
 455      20617420 
 456 003e 0000     		.align	2
 457              	.LC2:
 458 0040 49324320 		.ascii	"I2C scan complete.\015\012\000"
 458      7363616E 
 458      20636F6D 
 458      706C6574 
 458      652E0D0A 
 459              		.section	.text.I2C_Scan,"ax",%progbits
 460              		.align	1
 461              		.global	I2C_Scan
 462              		.syntax unified
 463              		.thumb
 464              		.thumb_func
 466              	I2C_Scan:
 467              	.LFB145:
 332:Core/Src/main.c **** 
 333:Core/Src/main.c **** void I2C_Scan(void)
 334:Core/Src/main.c **** {
 468              		.loc 1 334 1 is_stmt 1 view -0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472 0000 10B5     		push	{r4, lr}
 473              	.LCFI14:
 474              		.cfi_def_cfa_offset 8
 475              		.cfi_offset 4, -8
 476              		.cfi_offset 14, -4
 335:Core/Src/main.c ****     Debug_Print("Starting I2C scan...\r\n");
 477              		.loc 1 335 5 view .LVU86
 478 0002 0E48     		ldr	r0, .L34
 479 0004 FFF7FEFF 		bl	Debug_Print
 480              	.LVL29:
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****     for (uint8_t addr = 0x03; addr <= 0x77; addr++)
 481              		.loc 1 337 5 view .LVU87
 482              	.LBB8:
 483              		.loc 1 337 10 view .LVU88
 484              		.loc 1 337 18 is_stmt 0 view .LVU89
 485 0008 0324     		movs	r4, #3
 486              		.loc 1 337 5 view .LVU90
 487 000a 01E0     		b	.L29
 488              	.LVL30:
 489              	.L30:
 490              		.loc 1 337 49 is_stmt 1 discriminator 2 view .LVU91
 491 000c 0134     		adds	r4, r4, #1
 492              	.LVL31:
 493              		.loc 1 337 49 is_stmt 0 discriminator 2 view .LVU92
 494 000e E4B2     		uxtb	r4, r4
 495              	.LVL32:
 496              	.L29:
 497              		.loc 1 337 36 is_stmt 1 discriminator 1 view .LVU93
 498 0010 772C     		cmp	r4, #119
ARM GAS  /tmp/ccqA6WvH.s 			page 16


 499 0012 0ED8     		bhi	.L33
 338:Core/Src/main.c ****     {
 339:Core/Src/main.c ****         // Check if a device responds at this address
 340:Core/Src/main.c ****         if (HAL_I2C_IsDeviceReady(&hi2c1, (addr << 1), 1, HAL_MAX_DELAY) == HAL_OK)
 500              		.loc 1 340 9 view .LVU94
 501              		.loc 1 340 13 is_stmt 0 view .LVU95
 502 0014 4FF0FF33 		mov	r3, #-1
 503 0018 0122     		movs	r2, #1
 504 001a 04FA02F1 		lsl	r1, r4, r2
 505 001e 0848     		ldr	r0, .L34+4
 506 0020 FFF7FEFF 		bl	HAL_I2C_IsDeviceReady
 507              	.LVL33:
 508              		.loc 1 340 12 discriminator 1 view .LVU96
 509 0024 0028     		cmp	r0, #0
 510 0026 F1D1     		bne	.L30
 341:Core/Src/main.c ****         {
 342:Core/Src/main.c ****             Debug_Print("I2C device found at address: 0x%02X\r\n", addr);
 511              		.loc 1 342 13 is_stmt 1 view .LVU97
 512 0028 2146     		mov	r1, r4
 513 002a 0648     		ldr	r0, .L34+8
 514 002c FFF7FEFF 		bl	Debug_Print
 515              	.LVL34:
 516 0030 ECE7     		b	.L30
 517              	.L33:
 518              	.LBE8:
 343:Core/Src/main.c ****         }
 344:Core/Src/main.c ****     }
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****     Debug_Print("I2C scan complete.\r\n");
 519              		.loc 1 346 5 view .LVU98
 520 0032 0548     		ldr	r0, .L34+12
 521 0034 FFF7FEFF 		bl	Debug_Print
 522              	.LVL35:
 347:Core/Src/main.c **** }
 523              		.loc 1 347 1 is_stmt 0 view .LVU99
 524 0038 10BD     		pop	{r4, pc}
 525              	.LVL36:
 526              	.L35:
 527              		.loc 1 347 1 view .LVU100
 528 003a 00BF     		.align	2
 529              	.L34:
 530 003c 00000000 		.word	.LC0
 531 0040 00000000 		.word	hi2c1
 532 0044 18000000 		.word	.LC1
 533 0048 40000000 		.word	.LC2
 534              		.cfi_endproc
 535              	.LFE145:
 537              		.section	.text.Error_Handler,"ax",%progbits
 538              		.align	1
 539              		.global	Error_Handler
 540              		.syntax unified
 541              		.thumb
 542              		.thumb_func
 544              	Error_Handler:
 545              	.LFB146:
 348:Core/Src/main.c **** // void I2C_Scan(void)
 349:Core/Src/main.c **** // {
ARM GAS  /tmp/ccqA6WvH.s 			page 17


 350:Core/Src/main.c **** //     Debug_Print("Starting I2C scan...\r\n");
 351:Core/Src/main.c **** 
 352:Core/Src/main.c **** //     for (uint8_t addr = 0x03; addr <= 0x77; addr++)
 353:Core/Src/main.c **** //     {
 354:Core/Src/main.c **** //         // Check if a device responds at this address with a timeout mechanism
 355:Core/Src/main.c **** //         HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c2, (addr << 1), 1, HAL_MAX_DELAY);
 356:Core/Src/main.c **** 
 357:Core/Src/main.c **** //         if (status == HAL_OK)
 358:Core/Src/main.c **** //         {
 359:Core/Src/main.c **** //             Debug_Print("I2C device found at address: 0x%02X\r\n", addr);
 360:Core/Src/main.c **** //         }
 361:Core/Src/main.c **** //         else if (status == HAL_BUSY)
 362:Core/Src/main.c **** //         {
 363:Core/Src/main.c **** //             Debug_Print("I2C bus is busy during scan at address: 0x%02X\r\n", addr);
 364:Core/Src/main.c **** //         }
 365:Core/Src/main.c **** //         else
 366:Core/Src/main.c **** //         {
 367:Core/Src/main.c **** //             Debug_Print("No device at address: 0x%02X\r\n", addr);
 368:Core/Src/main.c **** //         }
 369:Core/Src/main.c **** //     }
 370:Core/Src/main.c **** 
 371:Core/Src/main.c **** //     Debug_Print("I2C scan complete.\r\n");
 372:Core/Src/main.c **** // }
 373:Core/Src/main.c **** 
 374:Core/Src/main.c **** 
 375:Core/Src/main.c **** 
 376:Core/Src/main.c **** 
 377:Core/Src/main.c **** 
 378:Core/Src/main.c **** 
 379:Core/Src/main.c **** 
 380:Core/Src/main.c **** 
 381:Core/Src/main.c **** 
 382:Core/Src/main.c **** 
 383:Core/Src/main.c **** 
 384:Core/Src/main.c **** 
 385:Core/Src/main.c **** 
 386:Core/Src/main.c **** 
 387:Core/Src/main.c **** 
 388:Core/Src/main.c **** 
 389:Core/Src/main.c **** 
 390:Core/Src/main.c **** /* USER CODE END 4 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c **** /**
 393:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 394:Core/Src/main.c ****   * @retval None
 395:Core/Src/main.c ****   */
 396:Core/Src/main.c **** void Error_Handler(void)
 397:Core/Src/main.c **** {
 546              		.loc 1 397 1 is_stmt 1 view -0
 547              		.cfi_startproc
 548              		@ Volatile: function does not return.
 549              		@ args = 0, pretend = 0, frame = 0
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551              		@ link register save eliminated.
 398:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 399:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 400:Core/Src/main.c ****   __disable_irq();
ARM GAS  /tmp/ccqA6WvH.s 			page 18


 552              		.loc 1 400 3 view .LVU102
 553              	.LBB9:
 554              	.LBI9:
 555              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
ARM GAS  /tmp/ccqA6WvH.s 			page 19


  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
ARM GAS  /tmp/ccqA6WvH.s 			page 20


 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccqA6WvH.s 			page 21


 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccqA6WvH.s 			page 22


 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccqA6WvH.s 			page 23


 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccqA6WvH.s 			page 24


 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccqA6WvH.s 			page 25


 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
ARM GAS  /tmp/ccqA6WvH.s 			page 26


 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccqA6WvH.s 			page 27


 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
ARM GAS  /tmp/ccqA6WvH.s 			page 28


 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccqA6WvH.s 			page 29


 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccqA6WvH.s 			page 30


 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
ARM GAS  /tmp/ccqA6WvH.s 			page 31


 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  /tmp/ccqA6WvH.s 			page 32


 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccqA6WvH.s 			page 33


 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccqA6WvH.s 			page 34


 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 556              		.loc 2 960 27 view .LVU103
 557              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 558              		.loc 2 962 3 view .LVU104
ARM GAS  /tmp/ccqA6WvH.s 			page 35


 559              		.syntax unified
 560              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 561 0000 72B6     		cpsid i
 562              	@ 0 "" 2
 563              		.thumb
 564              		.syntax unified
 565              	.L37:
 566              	.LBE10:
 567              	.LBE9:
 401:Core/Src/main.c ****   while (1)
 568              		.loc 1 401 3 view .LVU105
 402:Core/Src/main.c ****   {
 403:Core/Src/main.c ****   }
 569              		.loc 1 403 3 view .LVU106
 401:Core/Src/main.c ****   while (1)
 570              		.loc 1 401 9 view .LVU107
 571 0002 FEE7     		b	.L37
 572              		.cfi_endproc
 573              	.LFE146:
 575              		.section	.text.SystemClock_Config,"ax",%progbits
 576              		.align	1
 577              		.global	SystemClock_Config
 578              		.syntax unified
 579              		.thumb
 580              		.thumb_func
 582              	SystemClock_Config:
 583              	.LFB139:
 217:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 584              		.loc 1 217 1 view -0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 80
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588 0000 00B5     		push	{lr}
 589              	.LCFI15:
 590              		.cfi_def_cfa_offset 4
 591              		.cfi_offset 14, -4
 592 0002 95B0     		sub	sp, sp, #84
 593              	.LCFI16:
 594              		.cfi_def_cfa_offset 88
 218:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 595              		.loc 1 218 3 view .LVU109
 218:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 596              		.loc 1 218 22 is_stmt 0 view .LVU110
 597 0004 3422     		movs	r2, #52
 598 0006 0021     		movs	r1, #0
 599 0008 07A8     		add	r0, sp, #28
 600 000a FFF7FEFF 		bl	memset
 601              	.LVL37:
 219:Core/Src/main.c **** 
 602              		.loc 1 219 3 is_stmt 1 view .LVU111
 219:Core/Src/main.c **** 
 603              		.loc 1 219 22 is_stmt 0 view .LVU112
 604 000e 0023     		movs	r3, #0
 605 0010 0293     		str	r3, [sp, #8]
 606 0012 0393     		str	r3, [sp, #12]
 607 0014 0493     		str	r3, [sp, #16]
 608 0016 0593     		str	r3, [sp, #20]
ARM GAS  /tmp/ccqA6WvH.s 			page 36


 609 0018 0693     		str	r3, [sp, #24]
 223:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 610              		.loc 1 223 3 is_stmt 1 view .LVU113
 611              	.LBB11:
 223:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 612              		.loc 1 223 3 view .LVU114
 613 001a 0093     		str	r3, [sp]
 223:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 614              		.loc 1 223 3 view .LVU115
 615 001c 204A     		ldr	r2, .L44
 616 001e 116C     		ldr	r1, [r2, #64]
 617 0020 41F08051 		orr	r1, r1, #268435456
 618 0024 1164     		str	r1, [r2, #64]
 223:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 619              		.loc 1 223 3 view .LVU116
 620 0026 126C     		ldr	r2, [r2, #64]
 621 0028 02F08052 		and	r2, r2, #268435456
 622 002c 0092     		str	r2, [sp]
 223:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 623              		.loc 1 223 3 view .LVU117
 624 002e 009A     		ldr	r2, [sp]
 625              	.LBE11:
 223:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 626              		.loc 1 223 3 view .LVU118
 224:Core/Src/main.c **** 
 627              		.loc 1 224 3 view .LVU119
 628              	.LBB12:
 224:Core/Src/main.c **** 
 629              		.loc 1 224 3 view .LVU120
 630 0030 0193     		str	r3, [sp, #4]
 224:Core/Src/main.c **** 
 631              		.loc 1 224 3 view .LVU121
 632 0032 1C4B     		ldr	r3, .L44+4
 633 0034 1A68     		ldr	r2, [r3]
 634 0036 42F44042 		orr	r2, r2, #49152
 635 003a 1A60     		str	r2, [r3]
 224:Core/Src/main.c **** 
 636              		.loc 1 224 3 view .LVU122
 637 003c 1B68     		ldr	r3, [r3]
 638 003e 03F44043 		and	r3, r3, #49152
 639 0042 0193     		str	r3, [sp, #4]
 224:Core/Src/main.c **** 
 640              		.loc 1 224 3 view .LVU123
 641 0044 019B     		ldr	r3, [sp, #4]
 642              	.LBE12:
 224:Core/Src/main.c **** 
 643              		.loc 1 224 3 view .LVU124
 229:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 644              		.loc 1 229 3 view .LVU125
 229:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 645              		.loc 1 229 36 is_stmt 0 view .LVU126
 646 0046 0123     		movs	r3, #1
 647 0048 0793     		str	r3, [sp, #28]
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 648              		.loc 1 230 3 is_stmt 1 view .LVU127
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 649              		.loc 1 230 30 is_stmt 0 view .LVU128
ARM GAS  /tmp/ccqA6WvH.s 			page 37


 650 004a 4FF48033 		mov	r3, #65536
 651 004e 0893     		str	r3, [sp, #32]
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 652              		.loc 1 231 3 is_stmt 1 view .LVU129
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 653              		.loc 1 231 34 is_stmt 0 view .LVU130
 654 0050 0223     		movs	r3, #2
 655 0052 0D93     		str	r3, [sp, #52]
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 656              		.loc 1 232 3 is_stmt 1 view .LVU131
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 657              		.loc 1 232 35 is_stmt 0 view .LVU132
 658 0054 4FF48002 		mov	r2, #4194304
 659 0058 0E92     		str	r2, [sp, #56]
 233:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 660              		.loc 1 233 3 is_stmt 1 view .LVU133
 233:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 661              		.loc 1 233 30 is_stmt 0 view .LVU134
 662 005a 0422     		movs	r2, #4
 663 005c 0F92     		str	r2, [sp, #60]
 234:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 664              		.loc 1 234 3 is_stmt 1 view .LVU135
 234:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 665              		.loc 1 234 30 is_stmt 0 view .LVU136
 666 005e A822     		movs	r2, #168
 667 0060 1092     		str	r2, [sp, #64]
 235:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 668              		.loc 1 235 3 is_stmt 1 view .LVU137
 235:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 669              		.loc 1 235 30 is_stmt 0 view .LVU138
 670 0062 1193     		str	r3, [sp, #68]
 236:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 671              		.loc 1 236 3 is_stmt 1 view .LVU139
 236:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 672              		.loc 1 236 30 is_stmt 0 view .LVU140
 673 0064 1293     		str	r3, [sp, #72]
 237:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 674              		.loc 1 237 3 is_stmt 1 view .LVU141
 237:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 675              		.loc 1 237 30 is_stmt 0 view .LVU142
 676 0066 1393     		str	r3, [sp, #76]
 238:Core/Src/main.c ****   {
 677              		.loc 1 238 3 is_stmt 1 view .LVU143
 238:Core/Src/main.c ****   {
 678              		.loc 1 238 7 is_stmt 0 view .LVU144
 679 0068 07A8     		add	r0, sp, #28
 680 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 681              	.LVL38:
 238:Core/Src/main.c ****   {
 682              		.loc 1 238 6 discriminator 1 view .LVU145
 683 006e 98B9     		cbnz	r0, .L42
 245:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 684              		.loc 1 245 3 is_stmt 1 view .LVU146
 245:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 685              		.loc 1 245 31 is_stmt 0 view .LVU147
 686 0070 0F23     		movs	r3, #15
 687 0072 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccqA6WvH.s 			page 38


 247:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 688              		.loc 1 247 3 is_stmt 1 view .LVU148
 247:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 689              		.loc 1 247 34 is_stmt 0 view .LVU149
 690 0074 0223     		movs	r3, #2
 691 0076 0393     		str	r3, [sp, #12]
 248:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 692              		.loc 1 248 3 is_stmt 1 view .LVU150
 248:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 693              		.loc 1 248 35 is_stmt 0 view .LVU151
 694 0078 0023     		movs	r3, #0
 695 007a 0493     		str	r3, [sp, #16]
 249:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 696              		.loc 1 249 3 is_stmt 1 view .LVU152
 249:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 697              		.loc 1 249 36 is_stmt 0 view .LVU153
 698 007c 4FF4A053 		mov	r3, #5120
 699 0080 0593     		str	r3, [sp, #20]
 250:Core/Src/main.c **** 
 700              		.loc 1 250 3 is_stmt 1 view .LVU154
 250:Core/Src/main.c **** 
 701              		.loc 1 250 36 is_stmt 0 view .LVU155
 702 0082 4FF48053 		mov	r3, #4096
 703 0086 0693     		str	r3, [sp, #24]
 252:Core/Src/main.c ****   {
 704              		.loc 1 252 3 is_stmt 1 view .LVU156
 252:Core/Src/main.c ****   {
 705              		.loc 1 252 7 is_stmt 0 view .LVU157
 706 0088 0521     		movs	r1, #5
 707 008a 02A8     		add	r0, sp, #8
 708 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 709              	.LVL39:
 252:Core/Src/main.c ****   {
 710              		.loc 1 252 6 discriminator 1 view .LVU158
 711 0090 20B9     		cbnz	r0, .L43
 256:Core/Src/main.c **** 
 712              		.loc 1 256 1 view .LVU159
 713 0092 15B0     		add	sp, sp, #84
 714              	.LCFI17:
 715              		.cfi_remember_state
 716              		.cfi_def_cfa_offset 4
 717              		@ sp needed
 718 0094 5DF804FB 		ldr	pc, [sp], #4
 719              	.L42:
 720              	.LCFI18:
 721              		.cfi_restore_state
 240:Core/Src/main.c ****   }
 722              		.loc 1 240 5 is_stmt 1 view .LVU160
 723 0098 FFF7FEFF 		bl	Error_Handler
 724              	.LVL40:
 725              	.L43:
 254:Core/Src/main.c ****   }
 726              		.loc 1 254 5 view .LVU161
 727 009c FFF7FEFF 		bl	Error_Handler
 728              	.LVL41:
 729              	.L45:
 730              		.align	2
ARM GAS  /tmp/ccqA6WvH.s 			page 39


 731              	.L44:
 732 00a0 00380240 		.word	1073887232
 733 00a4 00700040 		.word	1073770496
 734              		.cfi_endproc
 735              	.LFE139:
 737              		.global	__aeabi_f2d
 738              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 739              		.align	2
 740              	.LC3:
 741 0000 252E3266 		.ascii	"%.2f,%.1f,%.2f,%.1f,\000"
 741      2C252E31 
 741      662C252E 
 741      32662C25 
 741      2E31662C 
 742 0015 000000   		.align	2
 743              	.LC4:
 744 0018 252E3266 		.ascii	"%.2f,%.1f,%.2f,%.1f\012\000"
 744      2C252E31 
 744      662C252E 
 744      32662C25 
 744      2E31660A 
 745              		.section	.text.main,"ax",%progbits
 746              		.align	1
 747              		.global	main
 748              		.syntax unified
 749              		.thumb
 750              		.thumb_func
 752              	main:
 753              	.LFB138:
 122:Core/Src/main.c **** 
 754              		.loc 1 122 1 view -0
 755              		.cfi_startproc
 756              		@ Volatile: function does not return.
 757              		@ args = 0, pretend = 0, frame = 32
 758              		@ frame_needed = 0, uses_anonymous_args = 0
 759 0000 00B5     		push	{lr}
 760              	.LCFI19:
 761              		.cfi_def_cfa_offset 4
 762              		.cfi_offset 14, -4
 763 0002 8FB0     		sub	sp, sp, #60
 764              	.LCFI20:
 765              		.cfi_def_cfa_offset 64
 131:Core/Src/main.c **** 
 766              		.loc 1 131 3 view .LVU163
 767 0004 FFF7FEFF 		bl	HAL_Init
 768              	.LVL42:
 138:Core/Src/main.c **** 
 769              		.loc 1 138 3 view .LVU164
 770 0008 FFF7FEFF 		bl	SystemClock_Config
 771              	.LVL43:
 146:Core/Src/main.c ****   MX_DMA_Init();
 772              		.loc 1 146 3 view .LVU165
 773 000c FFF7FEFF 		bl	MX_GPIO_Init
 774              	.LVL44:
 147:Core/Src/main.c ****   MX_I2C1_Init();
 775              		.loc 1 147 3 view .LVU166
 776 0010 FFF7FEFF 		bl	MX_DMA_Init
ARM GAS  /tmp/ccqA6WvH.s 			page 40


 777              	.LVL45:
 148:Core/Src/main.c ****   MX_USART1_UART_Init();
 778              		.loc 1 148 3 view .LVU167
 779 0014 FFF7FEFF 		bl	MX_I2C1_Init
 780              	.LVL46:
 149:Core/Src/main.c ****   MX_I2S1_Init();
 781              		.loc 1 149 3 view .LVU168
 782 0018 FFF7FEFF 		bl	MX_USART1_UART_Init
 783              	.LVL47:
 150:Core/Src/main.c ****   MX_I2C2_Init();
 784              		.loc 1 150 3 view .LVU169
 785 001c FFF7FEFF 		bl	MX_I2S1_Init
 786              	.LVL48:
 151:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 787              		.loc 1 151 3 view .LVU170
 788 0020 FFF7FEFF 		bl	MX_I2C2_Init
 789              	.LVL49:
 153:Core/Src/main.c **** 
 790              		.loc 1 153 3 view .LVU171
 791 0024 FFF7FEFF 		bl	RGB_LED_Init
 792              	.LVL50:
 155:Core/Src/main.c ****   ENS160_Init(&ens160,&hi2c1, ENS160_I2C_ADDR_LOW);
 793              		.loc 1 155 3 view .LVU172
 794 0028 364C     		ldr	r4, .L49
 795 002a C022     		movs	r2, #192
 796 002c 2146     		mov	r1, r4
 797 002e 3648     		ldr	r0, .L49+4
 798 0030 FFF7FEFF 		bl	VCNL4040_Init
 799              	.LVL51:
 156:Core/Src/main.c ****   HDC302x_Init(&hdc1, &hi2c1, HDC302x_ADDR_44);
 800              		.loc 1 156 3 view .LVU173
 801 0034 A422     		movs	r2, #164
 802 0036 2146     		mov	r1, r4
 803 0038 3448     		ldr	r0, .L49+8
 804 003a FFF7FEFF 		bl	ENS160_Init
 805              	.LVL52:
 157:Core/Src/main.c ****   HDC302x_Init(&hdc2, &hi2c1, HDC302x_ADDR_45);
 806              		.loc 1 157 3 view .LVU174
 807 003e 8822     		movs	r2, #136
 808 0040 2146     		mov	r1, r4
 809 0042 3348     		ldr	r0, .L49+12
 810 0044 FFF7FEFF 		bl	HDC302x_Init
 811              	.LVL53:
 158:Core/Src/main.c ****   HDC302x_Init(&hdc3, &hi2c1, HDC302x_ADDR_46);
 812              		.loc 1 158 3 view .LVU175
 813 0048 8A22     		movs	r2, #138
 814 004a 2146     		mov	r1, r4
 815 004c 3148     		ldr	r0, .L49+16
 816 004e FFF7FEFF 		bl	HDC302x_Init
 817              	.LVL54:
 159:Core/Src/main.c ****   HDC302x_Init(&hdc4, &hi2c1, HDC302x_ADDR_47);
 818              		.loc 1 159 3 view .LVU176
 819 0052 8C22     		movs	r2, #140
 820 0054 2146     		mov	r1, r4
 821 0056 3048     		ldr	r0, .L49+20
 822 0058 FFF7FEFF 		bl	HDC302x_Init
 823              	.LVL55:
ARM GAS  /tmp/ccqA6WvH.s 			page 41


 160:Core/Src/main.c ****   // MIC_Init(&mic, &hi2s1);
 824              		.loc 1 160 3 view .LVU177
 825 005c 8E22     		movs	r2, #142
 826 005e 2146     		mov	r1, r4
 827 0060 2E48     		ldr	r0, .L49+24
 828 0062 FFF7FEFF 		bl	HDC302x_Init
 829              	.LVL56:
 164:Core/Src/main.c **** 
 830              		.loc 1 164 3 view .LVU178
 831 0066 0422     		movs	r2, #4
 832 0068 2D49     		ldr	r1, .L49+28
 833 006a 2E48     		ldr	r0, .L49+32
 834 006c FFF7FEFF 		bl	HAL_I2S_Receive_DMA
 835              	.LVL57:
 836              	.L47:
 173:Core/Src/main.c ****   {
 837              		.loc 1 173 3 view .LVU179
 838              	.LBB13:
 190:Core/Src/main.c **** 
 839              		.loc 1 190 5 view .LVU180
 192:Core/Src/main.c ****     HDC302x_ReadData(&hdc2, &T2, &H2);
 840              		.loc 1 192 5 view .LVU181
 841 0070 07AA     		add	r2, sp, #28
 842 0072 06A9     		add	r1, sp, #24
 843 0074 2648     		ldr	r0, .L49+12
 844 0076 FFF7FEFF 		bl	HDC302x_ReadData
 845              	.LVL58:
 193:Core/Src/main.c ****     HDC302x_ReadData(&hdc3, &T3, &H3);
 846              		.loc 1 193 5 view .LVU182
 847 007a 09AA     		add	r2, sp, #36
 848 007c 08A9     		add	r1, sp, #32
 849 007e 2548     		ldr	r0, .L49+16
 850 0080 FFF7FEFF 		bl	HDC302x_ReadData
 851              	.LVL59:
 194:Core/Src/main.c ****     HDC302x_ReadData(&hdc4, &T4, &H4);
 852              		.loc 1 194 5 view .LVU183
 853 0084 0BAA     		add	r2, sp, #44
 854 0086 0AA9     		add	r1, sp, #40
 855 0088 2348     		ldr	r0, .L49+20
 856 008a FFF7FEFF 		bl	HDC302x_ReadData
 857              	.LVL60:
 195:Core/Src/main.c **** 
 858              		.loc 1 195 5 view .LVU184
 859 008e 0DAA     		add	r2, sp, #52
 860 0090 0CA9     		add	r1, sp, #48
 861 0092 2248     		ldr	r0, .L49+24
 862 0094 FFF7FEFF 		bl	HDC302x_ReadData
 863              	.LVL61:
 197:Core/Src/main.c ****     Debug_Print("%.2f,%.1f,%.2f,%.1f\n", T3, H3, T4, H4);
 864              		.loc 1 197 5 view .LVU185
 865 0098 0698     		ldr	r0, [sp, #24]	@ float
 866 009a FFF7FEFF 		bl	__aeabi_f2d
 867              	.LVL62:
 868 009e 0446     		mov	r4, r0
 869 00a0 0D46     		mov	r5, r1
 870 00a2 0998     		ldr	r0, [sp, #36]	@ float
 871 00a4 FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  /tmp/ccqA6WvH.s 			page 42


 872              	.LVL63:
 873 00a8 CDE90401 		strd	r0, [sp, #16]
 874 00ac 0898     		ldr	r0, [sp, #32]	@ float
 875 00ae FFF7FEFF 		bl	__aeabi_f2d
 876              	.LVL64:
 877 00b2 CDE90201 		strd	r0, [sp, #8]
 878 00b6 0798     		ldr	r0, [sp, #28]	@ float
 879 00b8 FFF7FEFF 		bl	__aeabi_f2d
 880              	.LVL65:
 881 00bc CDE90001 		strd	r0, [sp]
 882 00c0 2246     		mov	r2, r4
 883 00c2 2B46     		mov	r3, r5
 884 00c4 1848     		ldr	r0, .L49+36
 885 00c6 FFF7FEFF 		bl	Debug_Print
 886              	.LVL66:
 198:Core/Src/main.c ****     // printf("[S3] T=%.2f°C RH=%.1f%% | [S4] T=%.2f°C RH=%.1f%%\r\n", T3, H3, T4, H4);
 887              		.loc 1 198 5 view .LVU186
 888 00ca 0A98     		ldr	r0, [sp, #40]	@ float
 889 00cc FFF7FEFF 		bl	__aeabi_f2d
 890              	.LVL67:
 891 00d0 0446     		mov	r4, r0
 892 00d2 0D46     		mov	r5, r1
 893 00d4 0D98     		ldr	r0, [sp, #52]	@ float
 894 00d6 FFF7FEFF 		bl	__aeabi_f2d
 895              	.LVL68:
 896 00da CDE90401 		strd	r0, [sp, #16]
 897 00de 0C98     		ldr	r0, [sp, #48]	@ float
 898 00e0 FFF7FEFF 		bl	__aeabi_f2d
 899              	.LVL69:
 900 00e4 CDE90201 		strd	r0, [sp, #8]
 901 00e8 0B98     		ldr	r0, [sp, #44]	@ float
 902 00ea FFF7FEFF 		bl	__aeabi_f2d
 903              	.LVL70:
 904 00ee CDE90001 		strd	r0, [sp]
 905 00f2 2246     		mov	r2, r4
 906 00f4 2B46     		mov	r3, r5
 907 00f6 0D48     		ldr	r0, .L49+40
 908 00f8 FFF7FEFF 		bl	Debug_Print
 909              	.LVL71:
 201:Core/Src/main.c **** 
 910              		.loc 1 201 5 view .LVU187
 911 00fc 0A20     		movs	r0, #10
 912 00fe FFF7FEFF 		bl	HAL_Delay
 913              	.LVL72:
 914              	.LBE13:
 173:Core/Src/main.c ****   {
 915              		.loc 1 173 9 view .LVU188
 916 0102 B5E7     		b	.L47
 917              	.L50:
 918              		.align	2
 919              	.L49:
 920 0104 00000000 		.word	hi2c1
 921 0108 00000000 		.word	vcnl4040
 922 010c 00000000 		.word	ens160
 923 0110 00000000 		.word	hdc1
 924 0114 00000000 		.word	hdc2
 925 0118 00000000 		.word	hdc3
ARM GAS  /tmp/ccqA6WvH.s 			page 43


 926 011c 00000000 		.word	hdc4
 927 0120 00000000 		.word	dma
 928 0124 00000000 		.word	hi2s1
 929 0128 00000000 		.word	.LC3
 930 012c 18000000 		.word	.LC4
 931              		.cfi_endproc
 932              	.LFE138:
 934              		.section	.bss.cb_cnt.0,"aw",%nobits
 935              		.align	1
 938              	cb_cnt.0:
 939 0000 0000     		.space	2
 940              		.global	hdc4
 941              		.section	.bss.hdc4,"aw",%nobits
 942              		.align	2
 945              	hdc4:
 946 0000 00000000 		.space	8
 946      00000000 
 947              		.global	hdc3
 948              		.section	.bss.hdc3,"aw",%nobits
 949              		.align	2
 952              	hdc3:
 953 0000 00000000 		.space	8
 953      00000000 
 954              		.global	hdc2
 955              		.section	.bss.hdc2,"aw",%nobits
 956              		.align	2
 959              	hdc2:
 960 0000 00000000 		.space	8
 960      00000000 
 961              		.global	hdc1
 962              		.section	.bss.hdc1,"aw",%nobits
 963              		.align	2
 966              	hdc1:
 967 0000 00000000 		.space	8
 967      00000000 
 968              		.global	ens160
 969              		.section	.bss.ens160,"aw",%nobits
 970              		.align	2
 973              	ens160:
 974 0000 00000000 		.space	8
 974      00000000 
 975              		.global	vcnl4040
 976              		.section	.bss.vcnl4040,"aw",%nobits
 977              		.align	2
 980              	vcnl4040:
 981 0000 00000000 		.space	8
 981      00000000 
 982              		.global	ready
 983              		.section	.bss.ready,"aw",%nobits
 986              	ready:
 987 0000 00       		.space	1
 988              		.global	sample
 989              		.section	.bss.sample,"aw",%nobits
 990              		.align	2
 993              	sample:
 994 0000 00000000 		.space	4
 995              		.global	dma
ARM GAS  /tmp/ccqA6WvH.s 			page 44


 996              		.section	.bss.dma,"aw",%nobits
 997              		.align	2
 1000              	dma:
 1001 0000 00000000 		.space	16
 1001      00000000 
 1001      00000000 
 1001      00000000 
 1002              		.text
 1003              	.Letext0:
 1004              		.file 3 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 1005              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1006              		.file 5 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stddef.h"
 1007              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1008              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1009              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1010              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1011              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1012              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1013              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2s.h"
 1014              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1015              		.file 14 "Core/Inc/i2c.h"
 1016              		.file 15 "Core/Inc/i2s.h"
 1017              		.file 16 "Core/Inc/usart.h"
 1018              		.file 17 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdarg.h"
 1019              		.file 18 "Core/Inc/vcnl4040_sensor.h"
 1020              		.file 19 "Core/Inc/ens160_sensor.h"
 1021              		.file 20 "Core/Inc/humidity_temp_sensor.h"
 1022              		.file 21 "/usr/include/newlib/string.h"
 1023              		.file 22 "/usr/include/newlib/stdio.h"
 1024              		.file 23 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1025              		.file 24 "Core/Inc/dma.h"
 1026              		.file 25 "Core/Inc/gpio.h"
 1027              		.file 26 "<built-in>"
ARM GAS  /tmp/ccqA6WvH.s 			page 45


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccqA6WvH.s:21     .text.HAL_I2S_RxHalfCpltCallback:00000000 $t
     /tmp/ccqA6WvH.s:27     .text.HAL_I2S_RxHalfCpltCallback:00000000 HAL_I2S_RxHalfCpltCallback
     /tmp/ccqA6WvH.s:96     .text.HAL_I2S_RxHalfCpltCallback:00000038 $d
     /tmp/ccqA6WvH.s:938    .bss.cb_cnt.0:00000000 cb_cnt.0
     /tmp/ccqA6WvH.s:1000   .bss.dma:00000000 dma
     /tmp/ccqA6WvH.s:993    .bss.sample:00000000 sample
     /tmp/ccqA6WvH.s:986    .bss.ready:00000000 ready
     /tmp/ccqA6WvH.s:106    .text.RGB_LED_Init:00000000 $t
     /tmp/ccqA6WvH.s:112    .text.RGB_LED_Init:00000000 RGB_LED_Init
     /tmp/ccqA6WvH.s:184    .text.RGB_LED_Init:00000048 $d
     /tmp/ccqA6WvH.s:190    .text.RGB_LED_Blink:00000000 $t
     /tmp/ccqA6WvH.s:196    .text.RGB_LED_Blink:00000000 RGB_LED_Blink
     /tmp/ccqA6WvH.s:261    .text.RGB_LED_Blink:00000054 $d
     /tmp/ccqA6WvH.s:266    .text.Debug_Print:00000000 $t
     /tmp/ccqA6WvH.s:272    .text.Debug_Print:00000000 Debug_Print
     /tmp/ccqA6WvH.s:338    .text.Debug_Print:00000034 $d
     /tmp/ccqA6WvH.s:343    .text.Send_Raw_Bytes:00000000 $t
     /tmp/ccqA6WvH.s:349    .text.Send_Raw_Bytes:00000000 Send_Raw_Bytes
     /tmp/ccqA6WvH.s:390    .text.Send_Raw_Bytes:00000024 $d
     /tmp/ccqA6WvH.s:395    .text.Send_Buffer_Bytes:00000000 $t
     /tmp/ccqA6WvH.s:401    .text.Send_Buffer_Bytes:00000000 Send_Buffer_Bytes
     /tmp/ccqA6WvH.s:450    .rodata.I2C_Scan.str1.4:00000000 $d
     /tmp/ccqA6WvH.s:460    .text.I2C_Scan:00000000 $t
     /tmp/ccqA6WvH.s:466    .text.I2C_Scan:00000000 I2C_Scan
     /tmp/ccqA6WvH.s:530    .text.I2C_Scan:0000003c $d
     /tmp/ccqA6WvH.s:538    .text.Error_Handler:00000000 $t
     /tmp/ccqA6WvH.s:544    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccqA6WvH.s:576    .text.SystemClock_Config:00000000 $t
     /tmp/ccqA6WvH.s:582    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccqA6WvH.s:732    .text.SystemClock_Config:000000a0 $d
     /tmp/ccqA6WvH.s:739    .rodata.main.str1.4:00000000 $d
     /tmp/ccqA6WvH.s:746    .text.main:00000000 $t
     /tmp/ccqA6WvH.s:752    .text.main:00000000 main
     /tmp/ccqA6WvH.s:920    .text.main:00000104 $d
     /tmp/ccqA6WvH.s:980    .bss.vcnl4040:00000000 vcnl4040
     /tmp/ccqA6WvH.s:973    .bss.ens160:00000000 ens160
     /tmp/ccqA6WvH.s:966    .bss.hdc1:00000000 hdc1
     /tmp/ccqA6WvH.s:959    .bss.hdc2:00000000 hdc2
     /tmp/ccqA6WvH.s:952    .bss.hdc3:00000000 hdc3
     /tmp/ccqA6WvH.s:945    .bss.hdc4:00000000 hdc4
     /tmp/ccqA6WvH.s:935    .bss.cb_cnt.0:00000000 $d
     /tmp/ccqA6WvH.s:942    .bss.hdc4:00000000 $d
     /tmp/ccqA6WvH.s:949    .bss.hdc3:00000000 $d
     /tmp/ccqA6WvH.s:956    .bss.hdc2:00000000 $d
     /tmp/ccqA6WvH.s:963    .bss.hdc1:00000000 $d
     /tmp/ccqA6WvH.s:970    .bss.ens160:00000000 $d
     /tmp/ccqA6WvH.s:977    .bss.vcnl4040:00000000 $d
     /tmp/ccqA6WvH.s:987    .bss.ready:00000000 $d
     /tmp/ccqA6WvH.s:990    .bss.sample:00000000 $d
     /tmp/ccqA6WvH.s:997    .bss.dma:00000000 $d

UNDEFINED SYMBOLS
hi2s1
HAL_GPIO_Init
HAL_GPIO_WritePin
ARM GAS  /tmp/ccqA6WvH.s 			page 46


HAL_Delay
vsnprintf
strlen
HAL_UART_Transmit
huart1
HAL_I2C_IsDeviceReady
hi2c1
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_f2d
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_I2C1_Init
MX_USART1_UART_Init
MX_I2S1_Init
MX_I2C2_Init
VCNL4040_Init
ENS160_Init
HDC302x_Init
HAL_I2S_Receive_DMA
HDC302x_ReadData
